"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3972],{8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>c});var r=i(6540);const t={},o=r.createContext(t);function a(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(o.Provider,{value:n},e.children)}},9467:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"principi-fontamentali/solid/interfaced-segregation","title":"Interface Segregation Principle (ISP)","description":"E\' il quarto principio dei SOLID.","source":"@site/content/principi-fontamentali/solid/interfaced-segregation.md","sourceDirName":"principi-fontamentali/solid","slug":"/principi-fontamentali/solid/interfaced-segregation","permalink":"/docs/content/principi-fontamentali/solid/interfaced-segregation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/principi-fontamentali/solid/interfaced-segregation.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Interface Segregation Principle (ISP)","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Liskov Substitution Principle (LSP)","permalink":"/docs/content/principi-fontamentali/solid/liskov-substitution"},"next":{"title":"Dependency Inversion Principle (DIP)","permalink":"/docs/content/principi-fontamentali/solid/dependency-inversion"}}');var t=i(4848),o=i(8453);const a={title:"Interface Segregation Principle (ISP)",sidebar_position:4},c=void 0,s={},l=[{value:"Vantaggi ISP",id:"vantaggi-isp",level:3},{value:"\u274c Esempio che viola il principio \u274c",id:"-esempio-che-viola-il-principio-",level:3},{value:"\u2705 Esempio corretto \u2705",id:"-esempio-corretto-",level:3}];function p(e){const n={blockquote:"blockquote",code:"code",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"E' il quarto principio dei SOLID."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:'"I client non dovrebbero essere costretti a dipendere da interfacce che non usano."'})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["In altre parole, \xe8 meglio avere ",(0,t.jsx)(n.strong,{children:"interfacce piccole e specifiche"})," piuttosto che una grande interfaccia generica che obbliga le classi a fornire metodi inutili."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"vantaggi-isp",children:"Vantaggi ISP"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Le classi sono pi\xf9 coerenti con il loro comportamento reale"}),"\n",(0,t.jsx)(n.li,{children:"Il codice \xe8 pi\xf9 facile da leggere, testare e mantenere"}),"\n",(0,t.jsx)(n.li,{children:"Nessuna classe \xe8 costretta a implementare metodi inutili"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"-esempio-che-viola-il-principio-",children:"\u274c Esempio che viola il principio \u274c"}),"\n",(0,t.jsxs)(n.p,{children:["In questo esempio, abbiamo un'interfaccia ",(0,t.jsx)(n.code,{children:"ICharacter"})," troppo generica che include metodi che ",(0,t.jsx)(n.strong,{children:"non tutti i personaggi possono o devono usare"}),":\r\nImmagina, ad esempio, di avere una classe Warrior che implementa questa interfaccia: \xe8 costretta a implementare metodi che non le servono, violando il principio ISP.\r\nQuesto rende il codice fragile e meno leggibile."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public interface ICharacter\r\n{\r\n    void Attack();\r\n    void CastSpell();\r\n    void Heal();\r\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class Warrior : ICharacter\r\n{\r\n    public void Attack() {\r\n        Console.WriteLine("Warrior attacks with sword!");\r\n    }\r\n\r\n    public void CastSpell() {\r\n        throw new NotImplementedException("Warrior can\'t cast spells.");\r\n    }\r\n\r\n    public void Heal() {\r\n        throw new NotImplementedException("Warrior can\'t heal.");\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"-esempio-corretto-",children:"\u2705 Esempio corretto \u2705"}),"\n",(0,t.jsx)(n.p,{children:"All'esempio precedente, applichiamo il principio creando interfacce pi\xf9 piccole e specifiche:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public interface IAttacker\r\n{\r\n    void Attack();\r\n}\r\n\r\npublic interface ISpellCaster\r\n{\r\n    void CastSpell();\r\n}\r\n\r\npublic interface IHealer\r\n{\r\n    void Heal();\r\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Ora le classi possono implementare solo le funzionalit\xe0 che servono"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class Warrior : IAttacker\r\n{\r\n    public void Attack() {\r\n        Console.WriteLine("Warrior attacks with sword!");\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class Mage : IAttacker, ISpellCaster\r\n{\r\n    public void Attack() {\r\n        Console.WriteLine("Mage attacks with staff!");\r\n    }\r\n\r\n    public void CastSpell() {\r\n        Console.WriteLine("Mage casts a fireball!");\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class Priest : IHealer\r\n{\r\n    public void Heal() {\r\n        Console.WriteLine("Priest heals the party!");\r\n    }\r\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);