"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7606],{5575:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"principi-fontamentali/solid/open-close","title":"Open/Closed Principle (OCP)","description":"E\' il secondo dei principi SOLID e afferma che:","source":"@site/content/principi-fontamentali/solid/open-close.md","sourceDirName":"principi-fontamentali/solid","slug":"/principi-fontamentali/solid/open-close","permalink":"/docs/content/principi-fontamentali/solid/open-close","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/principi-fontamentali/solid/open-close.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Open/Closed Principle (OCP)","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Single Responsibility Principle (SRP)","permalink":"/docs/content/principi-fontamentali/solid/single-responsability"},"next":{"title":"Liskov Substitution Principle (LSP)","permalink":"/docs/content/principi-fontamentali/solid/liskov-substitution"}}');var s=i(4848),r=i(8453);const a={title:"Open/Closed Principle (OCP)",sidebar_position:2},c=void 0,t={},l=[{value:"\u274c Esempio che viola il principio \u274c",id:"-esempio-che-viola-il-principio-",level:3},{value:"\u2705 Esempio corretto \u2705",id:"-esempio-corretto-",level:3}];function p(e){const n={blockquote:"blockquote",br:"br",code:"code",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"E' il secondo dei principi SOLID e afferma che:"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:'"Il codice dovrebbe essere aperto all\u2019estensione, ma chiuso alla modifica."'})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In pratica, una classe, modulo o funzione ",(0,s.jsx)(n.strong,{children:"pu\xf2 essere estesa"})," per aggiungere nuove funzionalit\xe0, ma ",(0,s.jsx)(n.strong,{children:"non dovrebbe essere modificata"})," direttamente ogni volta che serve un cambiamento."]}),"\n",(0,s.jsxs)(n.p,{children:["Nel mondo del gaming, sistemi come nemici, armi, poteri speciali o missioni cambiano spesso.",(0,s.jsx)(n.br,{}),"\n","Con OCP puoi ",(0,s.jsx)(n.strong,{children:"aggiungere nuovi comportamenti"})," senza rompere o riscrivere il codice esistente."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"-esempio-che-viola-il-principio-",children:"\u274c Esempio che viola il principio \u274c"}),"\n",(0,s.jsxs)(n.p,{children:["Supponiamo di avere un sistema che gestisce danni basati sul tipo di nemico.",(0,s.jsx)(n.br,{}),"\n","Ogni volta che aggiungiamo un nuovo nemico, dobbiamo modificare questa classe.",(0,s.jsx)(n.br,{}),"\n",'Non \xe8 "chiusa alla modifica", quindi viola OCP.']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class CalcolatoreDanno\r\n{\r\n    public int CalcolaDanno(string tipoNemico)\r\n    {\r\n        if (tipoNemico == "Zombie")\r\n            return 10;\r\n        else if (tipoNemico == "Robot")\r\n            return 20;\r\n        else if (tipoNemico == "Alieno")\r\n            return 30;\r\n\r\n        return 0;\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"-esempio-corretto-",children:"\u2705 Esempio corretto \u2705"}),"\n",(0,s.jsxs)(n.p,{children:["Creiamo un'interfaccia ",(0,s.jsx)(n.strong,{children:"IEnemy"})," con un metodo ",(0,s.jsx)(n.strong,{children:"CalculateDamage()"}),", e poi implementiamo vari tipi di nemici."]}),"\n",(0,s.jsx)(n.p,{children:"In seguito, se vorremo aggiungere un nuovo nemico (Drago, Mutaforma, ecc.), possiamo farlo senza toccare il codice esistente ma solo aggiungendo nuove classi."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public interface IEnemy\r\n{\r\n    int CalculateDamage();\r\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class Zombie : IEnemy\r\n{\r\n    public int CalculateDamage() => 10;\r\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class Robot : IEnemy\r\n{\r\n    public int CalculateDamage() => 20;\r\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class Alien : IEnemy\r\n{\r\n    public int CalculateDamage() => 30;\r\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class CombatSystem\r\n{\r\n    public void Attack(IEnemy enemy)\r\n    {\r\n        int damage = enemy.CalculateDamage();\r\n        Console.WriteLine($"You took {damage} damage!");\r\n    }\r\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>c});var o=i(6540);const s={},r=o.createContext(s);function a(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);