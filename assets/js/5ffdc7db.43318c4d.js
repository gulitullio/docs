"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9792],{8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},8875:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"languages/c-plus-plus/rvo","title":"Return Value Optimization (RVO)","description":"E\' un\u2019ottimizzazione molto importante in C++ che riduce copie inutili degli oggetti quando una funzione restituisce un valore per valore.","source":"@site/content/languages/c-plus-plus/rvo.md","sourceDirName":"languages/c-plus-plus","slug":"/languages/c-plus-plus/rvo","permalink":"/docs/content/languages/c-plus-plus/rvo","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/languages/c-plus-plus/rvo.md","tags":[],"version":"current","frontMatter":{"title":"Return Value Optimization (RVO)"},"sidebar":"tutorialSidebar","previous":{"title":"Puntatori","permalink":"/docs/content/languages/c-plus-plus/puntatori"},"next":{"title":"Smart Pointer","permalink":"/docs/content/languages/c-plus-plus/smart-pointer"}}');var o=t(4848),r=t(8453);const s={title:"Return Value Optimization (RVO)"},a=void 0,l={},c=[{value:"Tipi di ottimizzazione",id:"tipi-di-ottimizzazione",level:3},{value:"Perch\xe9 \xe8 importante",id:"perch\xe9-\xe8-importante",level:3}];function u(e){const n={br:"br",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"E' un\u2019ottimizzazione molto importante in C++ che riduce copie inutili degli oggetti quando una funzione restituisce un valore per valore."}),"\n",(0,o.jsxs)(n.p,{children:["In C++ tradizionale, se una funzione restituisce un oggetto by value, il ",(0,o.jsx)(n.strong,{children:"flusso naturale"})," sarebbe:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"La funzione crea un oggetto locale."}),"\n",(0,o.jsx)(n.li,{children:"L\u2019oggetto locale viene copiato nel valore di ritorno temporaneo."}),"\n",(0,o.jsx)(n.li,{children:"Il temporaneo viene poi copiato o spostato nella variabile del chiamante."}),"\n",(0,o.jsx)(n.li,{children:"Questo comporta fino a due copie/spostamenti, che possono essere costosi se l\u2019oggetto \xe8 grande."}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["L\u2019RVO dice: ",(0,o.jsx)(n.strong,{children:'"Perch\xe9 fare copie inutili? Creiamo direttamente l\u2019oggetto nella memoria del chiamante"'}),".",(0,o.jsx)(n.br,{}),"\n","In pratica il compilatore:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Alloca lo spazio di destinazione direttamente dove andr\xe0 a vivere l\u2019oggetto finale."}),"\n",(0,o.jsx)(n.li,{children:"Costruisce l\xec l\u2019oggetto, evitando del tutto la copia o lo spostamento."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"tipi-di-ottimizzazione",children:"Tipi di ottimizzazione"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"RVO classico"})}),"\n",(0,o.jsx)(n.p,{children:"Quando ritorni un oggetto creato direttamente nel return, ad esempio:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"MyClass makeObject() {\r\n    return MyClass(42); // costruito direttamente nello spazio del chiamante\r\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"NRVO (Named Return Value Optimization)"})}),"\n",(0,o.jsx)(n.p,{children:"Quando ritorni una variabile locale con nome:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"MyClass makeObject() {\r\n    MyClass obj(42);\r\n    return obj; // NRVO: il compilatore costruisce 'obj' direttamente nello spazio di ritorno\r\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"perch\xe9-\xe8-importante",children:"Perch\xe9 \xe8 importante"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Migliora le performance evitando costi di copia/spostamento."}),"\n",(0,o.jsx)(n.li,{children:"Pu\xf2 essere cruciale per tipi non copiabili ma solo costruibili (per esempio un std::unique_ptr in certi contesti)."}),"\n",(0,o.jsx)(n.li,{children:"Riduce overhead nascosto, specialmente nei container e nelle API che restituiscono oggetti pesanti."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);