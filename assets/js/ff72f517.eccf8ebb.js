"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2135],{8453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>o});var r=a(6540);const i={},l=r.createContext(i);function t(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(l.Provider,{value:n},e.children)}},9640:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>s});const r=JSON.parse('{"id":"architetture/mvvm","title":"MVVM (Model-View-ViewModel)","description":"E\' un pattern di progettazione che separa un\'applicazione in tre parti:","source":"@site/content/architetture/mvvm.md","sourceDirName":"architetture","slug":"/architetture/mvvm","permalink":"/docs/content/architetture/mvvm","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/architetture/mvvm.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"MVVM (Model-View-ViewModel)","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"MVC (Model-View-Controller)","permalink":"/docs/content/architetture/mvc"},"next":{"title":"Layered Architecture (Architettura a livelli)","permalink":"/docs/content/architetture/layer"}}');var i=a(4848),l=a(8453);const t={title:"MVVM (Model-View-ViewModel)",sidebar_position:2},o=void 0,c={},s=[{value:"Perch\xe9 usarlo",id:"perch\xe9-usarlo",level:3},{value:"Quando usarlo",id:"quando-usarlo",level:2},{value:"Esempio",id:"esempio",level:2},{value:"Model",id:"model",level:4},{value:"ViewModel",id:"viewmodel",level:4},{value:"View",id:"view",level:4},{value:"GameManager",id:"gamemanager",level:4}];function d(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"E' un pattern di progettazione che separa un'applicazione in tre parti:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Model"}),": Contiene i dati e la logica di gioco"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"View"}),": si occupa della rappresentazione visiva e dell'interfaccia utente"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ViewModel"}),": agisce come ponte tra il Model e la View, gestendo lo stato e la logica di visualizzazione. Spesso implementa il ",(0,i.jsx)(n.strong,{children:"data binding"})," per aggiornare automaticamente la UI quando i dati cambiano."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Questo pattern \xe8 molto usato nelle applicazioni con interfacce reattive."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"perch\xe9-usarlo",children:"Perch\xe9 usarlo"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Separazione chiara"})," tra dati, interfaccia e logica di visualizzazione"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Aggiornamenti automatici della UI"})," con il data binding"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Testabilit\xe0"}),": la logica di presentazione (ViewModel) pu\xf2 essere testata senza la View"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mantenibilit\xe0"}),": modificare la UI senza toccare la logica"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"quando-usarlo",children:"Quando usarlo"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Giochi con interfacce complesse e dinamiche (es. HUD dinamici, inventari, menu)."}),"\n",(0,i.jsx)(n.li,{children:"Progetti in cui la UI cambia frequentemente in base allo stato di gioco."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"esempio",children:"Esempio"}),"\n",(0,i.jsx)(n.p,{children:"Un gioco in cui il giocatore ha una barra della vita (HP) che si aggiorna automaticamente quando subisce danni."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Il giocatore subisce danno \u2192 ",(0,i.jsx)(n.code,{children:"playerViewModel.TakeDamage()"})]}),"\n",(0,i.jsxs)(n.li,{children:["Il ",(0,i.jsx)(n.code,{children:"ViewModel"})," aggiorna il ",(0,i.jsx)(n.code,{children:"Model"})," e invia un evento."]}),"\n",(0,i.jsxs)(n.li,{children:["La ",(0,i.jsx)(n.code,{children:"View"})," riceve l'evento e aggiorna la barra della vita."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"model",children:"Model"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class PlayerModel\r\n{\r\n    public int MaxHealth { get; private set; }\r\n    public int CurrentHealth { get; private set; }\r\n\r\n    public PlayerModel(int maxHealth)\r\n    {\r\n        MaxHealth = maxHealth;\r\n        CurrentHealth = maxHealth;\r\n    }\r\n\r\n    public void TakeDamage(int amount)\r\n    {\r\n        CurrentHealth = Mathf.Max(CurrentHealth - amount, 0);\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"viewmodel",children:"ViewModel"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class PlayerViewModel\r\n{\r\n    private PlayerModel playerModel;\r\n    public event Action<int, int> OnHealthChanged;\r\n\r\n    public PlayerViewModel(PlayerModel model)\r\n    {\r\n        playerModel = model;\r\n    }\r\n\r\n    public void TakeDamage(int amount)\r\n    {\r\n        playerModel.TakeDamage(amount);\r\n        OnHealthChanged?.Invoke(playerModel.CurrentHealth, playerModel.MaxHealth);\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"view",children:"View"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class HealthBarView : MonoBehaviour\r\n{\r\n    public Slider healthSlider;\r\n\r\n    public void UpdateHealth(int current, int max)\r\n    {\r\n        healthSlider.maxValue = max;\r\n        healthSlider.value = current;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"gamemanager",children:"GameManager"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class GameManager : MonoBehaviour\r\n{\r\n    public HealthBarView healthBarView;\r\n    private PlayerViewModel playerViewModel;\r\n\r\n    private void Start()\r\n    {\r\n        var playerModel = new PlayerModel(100);\r\n        playerViewModel = new PlayerViewModel(playerModel);\r\n\r\n        playerViewModel.OnHealthChanged += healthBarView.UpdateHealth;\r\n        healthBarView.UpdateHealth(playerModel.CurrentHealth, playerModel.MaxHealth);\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (Input.GetKeyDown(KeyCode.Space))\r\n        {\r\n            playerViewModel.TakeDamage(10);\r\n        }\r\n    }\r\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);