"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7447],{8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var t=i(6540);const r={},o=t.createContext(r);function a(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(o.Provider,{value:n},e.children)}},9446:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"architetture/ecs","title":"Entity-Component-System (ECS)","description":"E\' un paradigma architetturale molto usato nei motori di gioco moderni (Unity, Unreal, ecc.), nato per gestire in modo efficiente moltissimi oggetti di gioco e le loro interazioni.","source":"@site/content/architetture/ecs.md","sourceDirName":"architetture","slug":"/architetture/ecs","permalink":"/docs/content/architetture/ecs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/architetture/ecs.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Entity-Component-System (ECS)","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Event-Driven Architecture (EDA)","permalink":"/docs/content/architetture/event-driven"},"next":{"title":"Collision detection","permalink":"/docs/content/algoritmi/collision-detection"}}');var r=i(4848),o=i(8453);const a={title:"Entity-Component-System (ECS)",sidebar_position:6},l=void 0,s={},c=[{value:"Perch\xe9 usarlo",id:"perch\xe9-usarlo",level:3},{value:"Quando usarlo",id:"quando-usarlo",level:3},{value:"Come si usa in Unity",id:"come-si-usa-in-unity",level:3},{value:"Esempio",id:"esempio",level:3},{value:"Components",id:"components",level:4},{value:"System: movement",id:"system-movement",level:4},{value:"System: lifetime",id:"system-lifetime",level:4},{value:"Entity",id:"entity",level:4}];function d(e){const n={code:"code",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"E' un paradigma architetturale molto usato nei motori di gioco moderni (Unity, Unreal, ecc.), nato per gestire in modo efficiente moltissimi oggetti di gioco e le loro interazioni."}),"\n",(0,r.jsx)(n.p,{children:"Si basa su tre concetti chiave:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Entity"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\xc8 un contenitore logico (un ID univoco) che rappresenta un \u201coggetto\u201d di gioco."}),"\n",(0,r.jsx)(n.li,{children:"Non ha logica e non ha dati di per s\xe9."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Esempi: un nemico, un proiettile, un albero."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Component"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Sono strutture di dati puri che definiscono caratteristiche dell\u2019entit\xe0."}),"\n",(0,r.jsx)(n.li,{children:"Niente logica, solo dati."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Esempi: Position (Vector3 value), Health (int current, int max), Velocity (Vector3 value)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"System"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Contiene la logica che processa entit\xe0 che hanno specifici componenti."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Esempio: un MovementSystem elabora tutte le entit\xe0 che hanno Position e Velocity per aggiornarne la posizione."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"perch\xe9-usarlo",children:"Perch\xe9 usarlo"}),"\n",(0,r.jsx)(n.p,{children:"Rispetto al classico approccio OOP con GameObject + MonoBehaviour, ECS offre:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance"}),": i componenti sono memorizzati in array contigui in memoria \u2192 ottimizzazione della cache CPU (Data-Oriented Design)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scalabilit\xe0"}),": perfetto per gestire decine di migliaia di entit\xe0 senza crolli di framerate."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Separazione chiara"}),": tra logica nei System, dati nei Component, struttura nelle Entity \u2192 evita monoliti di MonoBehaviour di stato e logica."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Flessibilit\xe0"}),": cambiare il comportamento di un\u2019entit\xe0 \xe8 facile, aggiungi o rimuovi componenti."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"quando-usarlo",children:"Quando usarlo"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Giochi con tante entit\xe0 (sparatutto con centinaia di proiettili, RTS con migliaia di unit\xe0)."}),"\n",(0,r.jsx)(n.li,{children:"Quando le performance sono critiche."}),"\n",(0,r.jsx)(n.li,{children:"Se vuoi logica fortemente decoupled e orientata ai dati."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"come-si-usa-in-unity",children:"Come si usa in Unity"}),"\n",(0,r.jsx)(n.p,{children:"Unity ha introdotto l\u2019ECS tramite il DOTS (Data-Oriented Technology Stack) che include:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Entities (il core ECS)"}),"\n",(0,r.jsx)(n.li,{children:"Jobs System (multi-threading)"}),"\n",(0,r.jsx)(n.li,{children:"Burst Compiler (compilazione ottimizzata)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"L\u2019uso tipico:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Crei Componenti come IComponentData (solo dati)."}),"\n",(0,r.jsx)(n.li,{children:"Definisci System che filtrano le entit\xe0 con certi componenti e applicano logica."}),"\n",(0,r.jsx)(n.li,{children:"Istanzi Entity aggiungendo componenti."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"esempio",children:"Esempio"}),"\n",(0,r.jsx)(n.p,{children:"Abbiamo un gioco con proiettili che si muovono in avanti e scompaiono dopo un certo tempo."}),"\n",(0,r.jsx)(n.h4,{id:"components",children:"Components"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public struct MoveSpeed : IComponentData\r\n{\r\n    public float Value;\r\n}\r\n\r\npublic struct Lifetime : IComponentData\r\n{\r\n    public float Value;\r\n}\r\n\r\npublic struct Direction : IComponentData\r\n{\r\n    public float3 Value;\r\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"system-movement",children:"System: movement"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"[BurstCompile]\r\npublic partial struct MovementSystem : ISystem\r\n{\r\n    public void OnUpdate(ref SystemState state)\r\n    {\r\n        float deltaTime = SystemAPI.Time.DeltaTime;\r\n\r\n        foreach (var (transform, speed, direction) in\r\n                 SystemAPI.Query<RefRW<LocalTransform>, RefRO<MoveSpeed>, RefRO<Direction>>())\r\n        {\r\n            transform.ValueRW.Position += direction.ValueRO.Value * speed.ValueRO.Value * deltaTime;\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"system-lifetime",children:"System: lifetime"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"[BurstCompile]\r\npublic partial struct LifetimeSystem : ISystem\r\n{\r\n    public void OnUpdate(ref SystemState state)\r\n    {\r\n        float deltaTime = SystemAPI.Time.DeltaTime;\r\n\r\n        var ecb = new EntityCommandBuffer(Unity.Collections.Allocator.Temp);\r\n\r\n        foreach (var (lifetime, entity) in SystemAPI.Query<RefRW<Lifetime>>().WithEntityAccess())\r\n        {\r\n            lifetime.ValueRW.Value -= deltaTime;\r\n\r\n            if (lifetime.ValueRW.Value <= 0f)\r\n            {\r\n                ecb.DestroyEntity(entity);\r\n            }\r\n        }\r\n\r\n        ecb.Playback(state.EntityManager);\r\n    }\r\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"entity",children:"Entity"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class BulletSpawner : MonoBehaviour\r\n{\r\n    public GameObject bulletPrefab;\r\n    public float speed = 10f;\r\n    public float lifeTime = 3f;\r\n\r\n    private EntityManager manager;\r\n    private Entity bulletEntityPrefab;\r\n\r\n    void Start()\r\n    {\r\n        manager = World.DefaultGameObjectInjectionWorld.EntityManager;\r\n        var settings = GameObjectConversionSettings.FromWorld(World.DefaultGameObjectInjectionWorld, null);\r\n        bulletEntityPrefab = GameObjectConversionUtility.ConvertGameObjectHierarchy(bulletPrefab, settings);\r\n    }\r\n\r\n    void Update()\r\n    {\r\n        if (Input.GetKeyDown(KeyCode.Space))\r\n        {\r\n            var bullet = manager.Instantiate(bulletEntityPrefab);\r\n\r\n            manager.SetComponentData(bullet, new MoveSpeed { Value = speed });\r\n            manager.SetComponentData(bullet, new Lifetime { Value = lifeTime });\r\n            manager.SetComponentData(bullet, new Direction { Value = new float3(0, 0, 1) });\r\n        }\r\n    }\r\n}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);