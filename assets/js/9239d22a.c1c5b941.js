"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4555],{8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(6540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},9756:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"design-patterns/creazionali/singleton","title":"Singleton","description":"E\' un design pattern creazionale che garantisce l\u2019esistenza di una sola istanza di una classe durante l\u2019esecuzione dell\u2019applicazione e fornisce un punto di accesso globale a questa istanza.","source":"@site/content/design-patterns/creazionali/singleton.md","sourceDirName":"design-patterns/creazionali","slug":"/design-patterns/creazionali/singleton","permalink":"/docs/content/design-patterns/creazionali/singleton","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/design-patterns/creazionali/singleton.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Singleton","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Creazionali","permalink":"/docs/content/design-patterns/creazionali/"},"next":{"title":"Factory","permalink":"/docs/content/design-patterns/creazionali/factory"}}');var t=i(4848),r=i(8453);const a={title:"Singleton",sidebar_position:1},o=void 0,l={},c=[{value:"Quando usarlo \u2705",id:"quando-usarlo-",level:3},{value:"Quando NON usarlo \u274c",id:"quando-non-usarlo-",level:3},{value:"Esempio",id:"esempio",level:3}];function d(e){const n={code:"code",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["E' un design pattern ",(0,t.jsx)(n.strong,{children:"creazionale"})," che garantisce l\u2019esistenza di ",(0,t.jsx)(n.strong,{children:"una sola istanza"})," di una classe durante l\u2019esecuzione dell\u2019applicazione e fornisce un ",(0,t.jsx)(n.strong,{children:"punto di accesso globale"})," a questa istanza."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Caratteristiche principali:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Istanza unica"})," \u2192 Solo un oggetto pu\xf2 esistere."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Accesso globale"})," \u2192 L\u2019istanza \xe8 accessibile ovunque."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Creazione controllata"})," \u2192 L\u2019oggetto viene creato solo quando serve."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"E' quindi usato spesso per:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Gestire ",(0,t.jsx)(n.strong,{children:"managers"})," (es. GameManager, AudioManager, UIManager)"]}),"\n",(0,t.jsxs)(n.li,{children:["Mantenere ",(0,t.jsx)(n.strong,{children:"dati persistenti"})," tra scene"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Evitare duplicazioni"})," di oggetti di servizio"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"quando-usarlo-",children:"Quando usarlo \u2705"}),"\n",(0,t.jsx)(n.p,{children:"Il Singleton \xe8 utile quando:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Un oggetto deve coordinare operazioni a livello globale (es. sistema di salvataggio, configurazione globale, log)."}),"\n",(0,t.jsx)(n.li,{children:"Si deve evitare la creazione multipla dello stesso servizio."}),"\n",(0,t.jsxs)(n.li,{children:["Serve un ",(0,t.jsx)(n.strong,{children:"punto di accesso centralizzato"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"quando-non-usarlo-",children:"Quando NON usarlo \u274c"}),"\n",(0,t.jsx)(n.p,{children:"Abusare del Singleton pu\xf2 rendere il codice difficile da testare, fortemente accoppiato e meno flessibile."}),"\n",(0,t.jsx)(n.p,{children:"Da evitare quando:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Si pu\xf2 passare l\u2019oggetto tramite ",(0,t.jsx)(n.strong,{children:"dependency injection"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Si vuole favorire la modularit\xe0 e il riuso."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"esempio",children:"Esempio"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"GameManager.Instance \xe8 accessibile ovunque."}),"\n",(0,t.jsx)(n.li,{children:"Solo una istanza vive durante tutta l\u2019applicazione."}),"\n",(0,t.jsx)(n.li,{children:"Persistente tra scene."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public class GameManager : MonoBehaviour\r\n{\r\n    public static GameManager Instance { get; private set; }\r\n    public int score;\r\n\r\n    void Awake()\r\n    {\r\n        if (Instance != null && Instance != this)\r\n        {\r\n            Destroy(gameObject); // Evita duplicati\r\n            return;\r\n        }\r\n\r\n        Instance = this;\r\n        DontDestroyOnLoad(gameObject); // Persiste tra scene\r\n    }\r\n\r\n    public void AddScore(int points)\r\n    {\r\n        score += points;\r\n    }\r\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);