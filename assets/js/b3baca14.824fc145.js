"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5426],{2407:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"languages/c-plus-plus/constructor-copy","title":"Copy Constructor","description":"\xc8 un costruttore che crea un nuovo oggetto copiando i dati da un oggetto esistente.","source":"@site/content/languages/c-plus-plus/constructor-copy.md","sourceDirName":"languages/c-plus-plus","slug":"/languages/c-plus-plus/constructor-copy","permalink":"/docs/content/languages/c-plus-plus/constructor-copy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/languages/c-plus-plus/constructor-copy.md","tags":[],"version":"current","frontMatter":{"title":"Copy Constructor"},"sidebar":"tutorialSidebar","previous":{"title":"Versioni","permalink":"/docs/content/languages/c-plus-plus/versions"},"next":{"title":"Move Constructor","permalink":"/docs/content/languages/c-plus-plus/constructor-move"}}');var s=n(4848),r=n(8453);const a={title:"Copy Constructor"},c=void 0,l={},u=[{value:"Esempio",id:"esempio",level:3}];function i(e){const t={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"\xc8 un costruttore che crea un nuovo oggetto copiando i dati da un oggetto esistente."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"MyClass(const MyClass& other); // Firma tipica\n"})}),"\n",(0,s.jsx)(t.p,{children:"Quando viene chiamato:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Quando inizializzi un oggetto da un altro passato per reference costante."}),"\n",(0,s.jsx)(t.li,{children:"Quando ritorni un oggetto per valore (anche se spesso l\u2019ottimizzazione RVO lo evita)."}),"\n",(0,s.jsx)(t.li,{children:"Quando passi un oggetto per valore a una funzione."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"esempio",children:"Esempio"}),"\n",(0,s.jsx)(t.p,{children:"Qui copiamo il valore puntato, non solo il puntatore, per evitare shallow copy e double delete."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:'class MyClass {\r\n    int* data;\r\npublic:\r\n    MyClass(int val) : data(new int(val)) {}\r\n\r\n    // Copy constructor\r\n    MyClass(const MyClass& other) : data(new int(*other.data)) {\r\n        std::cout << "Copy constructor\\n";\r\n    }\r\n\r\n    ~MyClass() { delete data; }\r\n};\n'})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var o=n(6540);const s={},r=o.createContext(s);function a(e){const t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);