"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9081],{7982:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"principi-fontamentali/solid/liskov-substitution","title":"Liskov Substitution Principle (LSP)","description":"E\' il terzo principio SOLID e riguarda il modo in cui le classi derivate devono comportarsi rispetto alle classi base.","source":"@site/content/principi-fontamentali/solid/liskov-substitution.md","sourceDirName":"principi-fontamentali/solid","slug":"/principi-fontamentali/solid/liskov-substitution","permalink":"/docs/content/principi-fontamentali/solid/liskov-substitution","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/principi-fontamentali/solid/liskov-substitution.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Liskov Substitution Principle (LSP)","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Open/Closed Principle (OCP)","permalink":"/docs/content/principi-fontamentali/solid/open-close"},"next":{"title":"Interface Segregation Principle (ISP)","permalink":"/docs/content/principi-fontamentali/solid/interfaced-segregation"}}');var o=n(4848),s=n(8453);const t={title:"Liskov Substitution Principle (LSP)",sidebar_position:3},l=void 0,c={},a=[{value:"\u274c Esempio che viola il principio \u274c",id:"-esempio-che-viola-il-principio-",level:3},{value:"\u2705 Esempio corretto \u2705",id:"-esempio-corretto-",level:3}];function d(e){const i={blockquote:"blockquote",br:"br",code:"code",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.p,{children:"E' il terzo principio SOLID e riguarda il modo in cui le classi derivate devono comportarsi rispetto alle classi base."}),"\n",(0,o.jsxs)(i.blockquote,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:'"Le classi figlie devono poter essere usate al posto delle classi genitore senza effetti collaterali o comportamenti inattesi"'}),"."]}),"\n"]}),"\n",(0,o.jsx)(i.p,{children:"Se S \xe8 una sottoclasse di T, allora gli oggetti di tipo T possono essere sostituiti con oggetti di tipo S senza alterare la correttezza del programma."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsx)(i.h3,{id:"-esempio-che-viola-il-principio-",children:"\u274c Esempio che viola il principio \u274c"}),"\n",(0,o.jsxs)(i.p,{children:["Immaginiamo di avere una classe base ",(0,o.jsx)(i.code,{children:"Bird"})," con un metodo ",(0,o.jsx)(i.code,{children:"Fly()"}),", e di derivare una classe ",(0,o.jsx)(i.code,{children:"Penguin"})," (che per\xf2 non pu\xf2 volare).",(0,o.jsx)(i.br,{}),"\n","Il codice presume che ogni ",(0,o.jsx)(i.code,{children:"Bird"})," possa volare. Ma quando usiamo un ",(0,o.jsx)(i.code,{children:"Penguin"}),", otteniamo un'eccezione.",(0,o.jsx)(i.br,{}),"\n","Quindi la sostituzione della sottoclasse rompe il comportamento previsto, violando il principio di Liskov."]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-csharp",children:'public class Bird\r\n{\r\n    public virtual void Fly() {\r\n        Console.WriteLine("Flying...");\r\n    }\r\n}\n'})}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-csharp",children:'public class Penguin : Bird\r\n{\r\n    public override void Fly() {\r\n        throw new NotImplementedException("Penguins can\'t fly!");\r\n    }\r\n}\n'})}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-csharp",children:"public class BirdHandler\r\n{\r\n    public void MakeBirdFly(Bird bird) {\r\n        bird.Fly(); // Will crash if bird is a Penguin\r\n    }\r\n}\n"})}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsx)(i.h3,{id:"-esempio-corretto-",children:"\u2705 Esempio corretto \u2705"}),"\n",(0,o.jsxs)(i.p,{children:['Separiamo il concetto di "uccello che vola" da "uccello che non vola" usando un\'interfaccia specifica per il volo.',(0,o.jsx)(i.br,{}),"\n","Solo le classi che possono veramente volare implementano IFlyingBird, nn questo modo non abbiamo alcuna eccezione."]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-csharp",children:"public class Bird\r\n{\r\n    public string Name { get; set; }\r\n}\r\n\r\npublic interface IFlyingBird\r\n{\r\n    void Fly();\r\n}\n"})}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-csharp",children:'public class Sparrow : Bird, IFlyingBird\r\n{\r\n    public void Fly() {\r\n        Console.WriteLine("Sparrow flying!");\r\n    }\r\n}\n'})}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-csharp",children:"public class Penguin : Bird\r\n{\r\n    // Penguins do not implement IFlyingBird\r\n}\n"})}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-csharp",children:"public class BirdHandler\r\n{\r\n    public void MakeBirdFly(IFlyingBird bird)\r\n    {\r\n        bird.Fly(); // Safe: only birds that can fly are passed\r\n    }\r\n}\n"})})]})}function p(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>l});var r=n(6540);const o={},s=r.createContext(o);function t(e){const i=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),r.createElement(s.Provider,{value:i},e.children)}}}]);