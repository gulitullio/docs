"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[783],{3195:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"design-patterns/comportamentali/strategy","title":"Strategy","description":"Il Strategy Pattern \xe8 un pattern comportamentale che permette di definire una famiglia di algoritmi, incapsularli e renderli intercambiabili a runtime.","source":"@site/content/design-patterns/comportamentali/strategy.md","sourceDirName":"design-patterns/comportamentali","slug":"/design-patterns/comportamentali/strategy","permalink":"/docs/content/design-patterns/comportamentali/strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/design-patterns/comportamentali/strategy.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Strategy","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Observer","permalink":"/docs/content/design-patterns/comportamentali/observer"},"next":{"title":"MVC (Model-View-Controller)","permalink":"/docs/content/architetture/mvc"}}');var i=t(4848),a=t(8453);const o={title:"Strategy",sidebar_position:2},s=void 0,l={},c=[{value:"Struttura",id:"struttura",level:3},{value:"Quando usarlo \u2705",id:"quando-usarlo-",level:3},{value:"Quando NON usarlo \u274c",id:"quando-non-usarlo-",level:3},{value:"Esempio",id:"esempio",level:3},{value:"Interfaccia della strategia",id:"interfaccia-della-strategia",level:4},{value:"Strategie concrete",id:"strategie-concrete",level:4},{value:"Context (il personaggio)",id:"context-il-personaggio",level:4}];function d(e){const n={br:"br",code:"code",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Il ",(0,i.jsx)(n.strong,{children:"Strategy Pattern"})," \xe8 un pattern ",(0,i.jsx)(n.strong,{children:"comportamentale"})," che permette di definire una famiglia di algoritmi, incapsularli e renderli intercambiabili a runtime.",(0,i.jsx)(n.br,{}),"\n","Invece di avere una singola classe con tanti ",(0,i.jsx)(n.code,{children:"if"})," o ",(0,i.jsx)(n.code,{children:"switch"})," per decidere il comportamento, ogni strategia viene implementata come classe separata.",(0,i.jsx)(n.br,{}),"\n","L\u2019oggetto che le utilizza non conosce i dettagli interni della strategia."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Obiettivo:"})," separare l\u2019algoritmo dalla logica che lo usa, migliorando estendibilit\xe0 e manutenibilit\xe0."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"struttura",children:"Struttura"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Strategy (Interfaccia)"}),": definisce il contratto dell\u2019algoritmo."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Concrete Strategies"}),": implementazioni specifiche del comportamento."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context"}),": classe che usa la strategia e pu\xf2 cambiarla a runtime."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"quando-usarlo-",children:"Quando usarlo \u2705"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Quando hai ",(0,i.jsx)(n.strong,{children:"pi\xf9 varianti dello stesso algoritmo"})," e vuoi evitare ",(0,i.jsx)(n.code,{children:"if"}),"/",(0,i.jsx)(n.code,{children:"switch"})," annidati."]}),"\n",(0,i.jsxs)(n.li,{children:["Quando il comportamento deve poter ",(0,i.jsx)(n.strong,{children:"cambiare a runtime"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Quando vuoi ",(0,i.jsx)(n.strong,{children:'separare il "cosa" dal "come"'})," per migliorare la leggibilit\xe0."]}),"\n",(0,i.jsxs)(n.li,{children:["Quando vuoi poter ",(0,i.jsx)(n.strong,{children:"aggiungere nuove varianti senza modificare il codice esistente"})," (Open/Closed Principle)."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"quando-non-usarlo-",children:"Quando NON usarlo \u274c"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Se il numero di varianti \xe8 ",(0,i.jsx)(n.strong,{children:"molto basso e stabile"})," \u2192 introdurre un pattern potrebbe complicare inutilmente."]}),"\n",(0,i.jsxs)(n.li,{children:["Se le strategie ",(0,i.jsx)(n.strong,{children:"non condividono un\u2019interfaccia comune"})," \u2192 forzare il pattern porterebbe a design artificiale."]}),"\n",(0,i.jsx)(n.li,{children:"Se la strategia non cambier\xe0 mai a runtime e il comportamento \xe8 semplice \u2192 meglio mantenere il codice diretto."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"esempio",children:"Esempio"}),"\n",(0,i.jsx)(n.p,{children:"In questo esempio creeremo un sistema per muovere un personaggio con diverse strategie di movimento."}),"\n",(0,i.jsx)(n.h4,{id:"interfaccia-della-strategia",children:"Interfaccia della strategia"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public interface IMovementStrategy\r\n{\r\n    void Move(Transform character, float speed);\r\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"strategie-concrete",children:"Strategie concrete"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class WalkMovement : IMovementStrategy\r\n{\r\n    public void Move(Transform character, float speed)\r\n    {\r\n        character.Translate(Vector3.forward * speed * Time.deltaTime);\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class FlyMovement : IMovementStrategy\r\n{\r\n    public void Move(Transform character, float speed)\r\n    {\r\n        character.Translate(Vector3.up * Mathf.Sin(Time.time) * speed * Time.deltaTime);\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"context-il-personaggio",children:"Context (il personaggio)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class CharacterControllerStrategy : MonoBehaviour\r\n{\r\n    [SerializeField] private float speed = 5f;\r\n    private IMovementStrategy movementStrategy;\r\n\r\n    void Start()\r\n    {\r\n        // Strategia iniziale\r\n        movementStrategy = new WalkMovement();\r\n    }\r\n\r\n    void Update()\r\n    {\r\n        movementStrategy.Move(transform, speed);\r\n\r\n        // Cambio strategia a runtime\r\n        if (Input.GetKeyDown(KeyCode.Space))\r\n        {\r\n            movementStrategy = new FlyMovement();\r\n        }\r\n    }\r\n\r\n    public void SetMovementStrategy(IMovementStrategy newStrategy)\r\n    {\r\n        movementStrategy = newStrategy;\r\n    }\r\n}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(6540);const i={},a=r.createContext(i);function o(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);