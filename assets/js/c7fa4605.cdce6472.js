"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[941],{638:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"principi-fontamentali/solid","title":"Principi SOLID","description":"Sono cinque linee guida per scrivere codice orientato agli oggetti pi\xf9 chiaro e manutenibile:","source":"@site/content/principi-fontamentali/solid.md","sourceDirName":"principi-fontamentali","slug":"/principi-fontamentali/solid","permalink":"/docs/docs/principi-fontamentali/solid","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/principi-fontamentali/solid.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Principi SOLID","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Polimorfismo","permalink":"/docs/docs/principi-fontamentali/oop/polimorfismo"},"next":{"title":"DRY, KISS, YAGNI","permalink":"/docs/docs/principi-fontamentali/best-practices"}}');var o=n(4848),r=n(8453);const s={title:"Principi SOLID",sidebar_position:2},c=void 0,a={},l=[];function p(e){const i={br:"br",li:"li",ol:"ol",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.p,{children:"Sono cinque linee guida per scrivere codice orientato agli oggetti pi\xf9 chiaro e manutenibile:"}),"\n",(0,o.jsxs)(i.ol,{children:["\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"Single Responsibility Principle (SRP)"}),(0,o.jsx)(i.br,{}),"\n","Ogni classe dovrebbe avere una sola responsabilit\xe0 o motivo per cambiare."]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"Open/Closed Principle (OCP)"}),(0,o.jsx)(i.br,{}),"\n","Le entit\xe0 software dovrebbero essere aperte all'estensione, ma chiuse alla modifica."]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"Liskov Substitution Principle (LSP)"}),(0,o.jsx)(i.br,{}),"\n","Gli oggetti di una sottoclasse devono poter sostituire gli oggetti della superclasse senza alterare il corretto funzionamento del programma."]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"Interface Segregation Principle (ISP)"}),(0,o.jsx)(i.br,{}),"\n","\xc8 meglio avere interfacce specifiche e piccole piuttosto che una interfaccia generale e grande."]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"Dependency Inversion Principle (DIP)"}),(0,o.jsx)(i.br,{}),"\n","Le classi dovrebbero dipendere da astrazioni e non da classi concrete."]}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>s,x:()=>c});var t=n(6540);const o={},r=t.createContext(o);function s(e){const i=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:i},e.children)}}}]);