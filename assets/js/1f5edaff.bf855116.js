"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1689],{9439:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduzione","href":"/docs/content/introduzione","docId":"introduzione","unlisted":false},{"type":"category","label":"Naming conventions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"PascalCase","href":"/docs/content/naming-conventions/pascal-case","docId":"naming-conventions/pascal-case","unlisted":false},{"type":"link","label":"camelCase","href":"/docs/content/naming-conventions/camel-case","docId":"naming-conventions/camel-case","unlisted":false},{"type":"link","label":"snake_case","href":"/docs/content/naming-conventions/snake-case","docId":"naming-conventions/snake-case","unlisted":false},{"type":"link","label":"SCREAMING_SNAKE_CASE","href":"/docs/content/naming-conventions/screaming-snake-case","docId":"naming-conventions/screaming-snake-case","unlisted":false},{"type":"link","label":"Convenzioni in Unreal","href":"/docs/content/naming-conventions/unreal-naming-conventions","docId":"naming-conventions/unreal-naming-conventions","unlisted":false}],"href":"/docs/content/naming-conventions/"},{"type":"category","label":"Principi fondamentali","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"OOP","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Incapsulamento","href":"/docs/content/principi-fontamentali/oop/incapsulamento","docId":"principi-fontamentali/oop/incapsulamento","unlisted":false},{"type":"link","label":"Ereditariet\xe0","href":"/docs/content/principi-fontamentali/oop/ereditariet\xe0","docId":"principi-fontamentali/oop/ereditariet\xe0","unlisted":false},{"type":"link","label":"Polimorfismo","href":"/docs/content/principi-fontamentali/oop/polimorfismo","docId":"principi-fontamentali/oop/polimorfismo","unlisted":false}],"href":"/docs/content/principi-fontamentali/oop/"},{"type":"category","label":"Principi SOLID","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Single Responsibility Principle (SRP)","href":"/docs/content/principi-fontamentali/solid/single-responsability","docId":"principi-fontamentali/solid/single-responsability","unlisted":false},{"type":"link","label":"Open/Closed Principle (OCP)","href":"/docs/content/principi-fontamentali/solid/open-close","docId":"principi-fontamentali/solid/open-close","unlisted":false},{"type":"link","label":"Liskov Substitution Principle (LSP)","href":"/docs/content/principi-fontamentali/solid/liskov-substitution","docId":"principi-fontamentali/solid/liskov-substitution","unlisted":false},{"type":"link","label":"Interface Segregation Principle (ISP)","href":"/docs/content/principi-fontamentali/solid/interfaced-segregation","docId":"principi-fontamentali/solid/interfaced-segregation","unlisted":false},{"type":"link","label":"Dependency Inversion Principle (DIP)","href":"/docs/content/principi-fontamentali/solid/dependency-inversion","docId":"principi-fontamentali/solid/dependency-inversion","unlisted":false}],"href":"/docs/content/principi-fontamentali/solid/"},{"type":"category","label":"Best Practices","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"DRY - Don\'t Repeat Yourself","href":"/docs/content/principi-fontamentali/best-practices/dry","docId":"principi-fontamentali/best-practices/dry","unlisted":false},{"type":"link","label":"KISS - Keep It Simple, Stupid","href":"/docs/content/principi-fontamentali/best-practices/kiss","docId":"principi-fontamentali/best-practices/kiss","unlisted":false},{"type":"link","label":"YAGNI - You Aren\u2019t Gonna Need It","href":"/docs/content/principi-fontamentali/best-practices/yagni","docId":"principi-fontamentali/best-practices/yagni","unlisted":false}],"href":"/docs/content/principi-fontamentali/best-practices/"}],"href":"/docs/content/principi-fontamentali/"},{"type":"category","label":"Design Patterns","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Creazionali","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Singleton","href":"/docs/content/design-patterns/creazionali/singleton","docId":"design-patterns/creazionali/singleton","unlisted":false},{"type":"link","label":"Factory","href":"/docs/content/design-patterns/creazionali/factory","docId":"design-patterns/creazionali/factory","unlisted":false}],"href":"/docs/content/design-patterns/creazionali/"},{"type":"category","label":"Strutturali","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Decorator","href":"/docs/content/design-patterns/strutturali/decorator","docId":"design-patterns/strutturali/decorator","unlisted":false},{"type":"link","label":"Adapter (o Wrapper)","href":"/docs/content/design-patterns/strutturali/adapter","docId":"design-patterns/strutturali/adapter","unlisted":false}],"href":"/docs/content/design-patterns/strutturali/"},{"type":"category","label":"Comportamentali","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Observer","href":"/docs/content/design-patterns/comportamentali/observer","docId":"design-patterns/comportamentali/observer","unlisted":false},{"type":"link","label":"Strategy","href":"/docs/content/design-patterns/comportamentali/strategy","docId":"design-patterns/comportamentali/strategy","unlisted":false}],"href":"/docs/content/design-patterns/comportamentali/"}],"href":"/docs/content/design-patterns/"},{"type":"category","label":"Architetture","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"MVC (Model-View-Controller)","href":"/docs/content/architetture/mvc","docId":"architetture/mvc","unlisted":false},{"type":"link","label":"MVVM (Model-View-ViewModel)","href":"/docs/content/architetture/mvvm","docId":"architetture/mvvm","unlisted":false},{"type":"link","label":"Layered Architecture (Architettura a livelli)","href":"/docs/content/architetture/layer","docId":"architetture/layer","unlisted":false},{"type":"link","label":"Component-Based Architecture","href":"/docs/content/architetture/component-based","docId":"architetture/component-based","unlisted":false},{"type":"link","label":"Event-Driven Architecture","href":"/docs/content/architetture/event-driven","docId":"architetture/event-driven","unlisted":false},{"type":"link","label":"Entity-Component-System (ECS)","href":"/docs/content/architetture/ecs","docId":"architetture/ecs","unlisted":false}]},{"type":"category","label":"Algoritmi","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Collision detection","href":"/docs/content/algoritmi/collision-detection","docId":"algoritmi/collision-detection","unlisted":false},{"type":"link","label":"Collision resolution","href":"/docs/content/algoritmi/collision-resolution","docId":"algoritmi/collision-resolution","unlisted":false},{"type":"link","label":"Pathfinding","href":"/docs/content/algoritmi/pathfinding","docId":"algoritmi/pathfinding","unlisted":false}]},{"type":"category","label":"Linguaggi","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"TypeScript","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Intro","href":"/docs/content/languages/typescript/intro","docId":"languages/typescript/intro","unlisted":false}]},{"type":"category","label":"C++","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Intro","href":"/docs/content/languages/c-plus-plus/intro","docId":"languages/c-plus-plus/intro","unlisted":false}]}]},{"type":"category","label":"Interview","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Domande conoscitive","href":"/docs/content/interview/domande-conoscitive","docId":"interview/domande-conoscitive","unlisted":false},{"type":"link","label":"Domande situazionali","href":"/docs/content/interview/domande-situazionali","docId":"interview/domande-situazionali","unlisted":false},{"type":"link","label":"Domande relative alla posizione","href":"/docs/content/interview/domande-azienda","docId":"interview/domande-azienda","unlisted":false}]}]},"docs":{"algoritmi/collision-detection":{"id":"algoritmi/collision-detection","title":"Collision detection","description":"","sidebar":"tutorialSidebar"},"algoritmi/collision-resolution":{"id":"algoritmi/collision-resolution","title":"Collision resolution","description":"","sidebar":"tutorialSidebar"},"algoritmi/pathfinding":{"id":"algoritmi/pathfinding","title":"Pathfinding","description":"","sidebar":"tutorialSidebar"},"architetture/component-based":{"id":"architetture/component-based","title":"Component-Based Architecture","description":"","sidebar":"tutorialSidebar"},"architetture/ecs":{"id":"architetture/ecs","title":"Entity-Component-System (ECS)","description":"","sidebar":"tutorialSidebar"},"architetture/event-driven":{"id":"architetture/event-driven","title":"Event-Driven Architecture","description":"","sidebar":"tutorialSidebar"},"architetture/layer":{"id":"architetture/layer","title":"Layered Architecture (Architettura a livelli)","description":"","sidebar":"tutorialSidebar"},"architetture/mvc":{"id":"architetture/mvc","title":"MVC (Model-View-Controller)","description":"","sidebar":"tutorialSidebar"},"architetture/mvvm":{"id":"architetture/mvvm","title":"MVVM (Model-View-ViewModel)","description":"","sidebar":"tutorialSidebar"},"design-patterns/comportamentali/index":{"id":"design-patterns/comportamentali/index","title":"Comportamentali","description":"Definiscono come gli oggetti interagiscono e comunicano tra loro, separando le responsabilit\xe0 e semplificando il flusso logico.","sidebar":"tutorialSidebar"},"design-patterns/comportamentali/observer":{"id":"design-patterns/comportamentali/observer","title":"Observer","description":"E\' un pattern comportamentale che definisce una relazione uno-a-molti tra oggetti, in modo che quando uno stato dell\u2019oggetto osservato (subject) cambia, tutti gli osservatori (observers) vengano notificati automaticamente.","sidebar":"tutorialSidebar"},"design-patterns/comportamentali/strategy":{"id":"design-patterns/comportamentali/strategy","title":"Strategy","description":"Il Strategy Pattern \xe8 un pattern comportamentale che permette di definire una famiglia di algoritmi, incapsularli e renderli intercambiabili a runtime.","sidebar":"tutorialSidebar"},"design-patterns/creazionali/factory":{"id":"design-patterns/creazionali/factory","title":"Factory","description":"Il Factory Pattern \xe8 un pattern creazionale che fornisce un\u2019interfaccia per creare oggetti in una superclasse, lasciando alle sottoclassi la decisione su quale classe concreta istanziare.","sidebar":"tutorialSidebar"},"design-patterns/creazionali/index":{"id":"design-patterns/creazionali/index","title":"Creazionali","description":"Gestiscono il processo di creazione degli oggetti, rendendolo pi\xf9 flessibile e indipendente dall\u2019implementazione concreta.","sidebar":"tutorialSidebar"},"design-patterns/creazionali/singleton":{"id":"design-patterns/creazionali/singleton","title":"Singleton","description":"E\' un design pattern creazionale che garantisce l\u2019esistenza di una sola istanza di una classe durante l\u2019esecuzione dell\u2019applicazione e fornisce un punto di accesso globale a questa istanza.","sidebar":"tutorialSidebar"},"design-patterns/index":{"id":"design-patterns/index","title":"Design Patterns","description":"Un Design Pattern \xe8 una soluzione riutilizzabile e testata per un problema ricorrente nello sviluppo software.","sidebar":"tutorialSidebar"},"design-patterns/strutturali/adapter":{"id":"design-patterns/strutturali/adapter","title":"Adapter (o Wrapper)","description":"Permette di adattare l\'interfaccia di una classe esistente a un\'altra interfaccia attesa dal client, senza modificare il codice originale.","sidebar":"tutorialSidebar"},"design-patterns/strutturali/decorator":{"id":"design-patterns/strutturali/decorator","title":"Decorator","description":"E\' un pattern strutturale che permette di aggiungere dinamicamente comportamenti o responsabilit\xe0 a un oggetto senza modificare il codice della sua classe originale.","sidebar":"tutorialSidebar"},"design-patterns/strutturali/index":{"id":"design-patterns/strutturali/index","title":"Strutturali","description":"Si concentrano sulla composizione di classi e oggetti per formare strutture pi\xf9 grandi mantenendo la flessibilit\xe0.","sidebar":"tutorialSidebar"},"interview/domande-azienda":{"id":"interview/domande-azienda","title":"Domande relative alla posizione","description":"Perch\xe9 vorresti lavorare per noi?","sidebar":"tutorialSidebar"},"interview/domande-conoscitive":{"id":"interview/domande-conoscitive","title":"Domande conoscitive","description":"Parlami di te","sidebar":"tutorialSidebar"},"interview/domande-situazionali":{"id":"interview/domande-situazionali","title":"Domande situazionali","description":"Fammi un esempio specifico di una situazione in cui hai usato buon senso e logica per risolvere un problema","sidebar":"tutorialSidebar"},"introduzione":{"id":"introduzione","title":"Introduzione","description":"Questa raccolta di materiali \xe8 pensata come una guida completa e pratica per prepararsi al meglio per colloqui tecnici nel settore dello sviluppo software, con un focus particolare sul game development.","sidebar":"tutorialSidebar"},"languages/c-plus-plus/intro":{"id":"languages/c-plus-plus/intro","title":"Intro","description":"","sidebar":"tutorialSidebar"},"languages/typescript/intro":{"id":"languages/typescript/intro","title":"Intro","description":"","sidebar":"tutorialSidebar"},"naming-conventions/camel-case":{"id":"naming-conventions/camel-case","title":"camelCase","description":"La prima parola in minuscolo, le successive con l\'iniziale maiuscola.","sidebar":"tutorialSidebar"},"naming-conventions/index":{"id":"naming-conventions/index","title":"Naming conventions","description":"Sono convenzioni per nominare variabili, funzioni, classi, costanti, ecc.","sidebar":"tutorialSidebar"},"naming-conventions/pascal-case":{"id":"naming-conventions/pascal-case","title":"PascalCase","description":"Ogni parola inizia con la lettera maiuscola, inclusa la prima.","sidebar":"tutorialSidebar"},"naming-conventions/screaming-snake-case":{"id":"naming-conventions/screaming-snake-case","title":"SCREAMING_SNAKE_CASE","description":"Tutte le lettere sono maiuscole, le parole sono separate da un underscore (_).","sidebar":"tutorialSidebar"},"naming-conventions/snake-case":{"id":"naming-conventions/snake-case","title":"snake_case","description":"Tutte le lettere sono minuscole, le parole sono separate da un underscore (_).","sidebar":"tutorialSidebar"},"naming-conventions/unreal-naming-conventions":{"id":"naming-conventions/unreal-naming-conventions","title":"Convenzioni in Unreal","description":"Unreal Engine utilizza convenzioni di scrittura particolari, definite da Epic Games, per garantire coerenza e chiarezza nel codice.","sidebar":"tutorialSidebar"},"principi-fontamentali/best-practices/dry":{"id":"principi-fontamentali/best-practices/dry","title":"DRY - Don\'t Repeat Yourself","description":"E\' una linea guida fondamentale nello sviluppo software, introdotta nel libro The Pragmatic Programmer.","sidebar":"tutorialSidebar"},"principi-fontamentali/best-practices/index":{"id":"principi-fontamentali/best-practices/index","title":"Best Practices","description":"I seguenti principi o best practices non hanno un \\"nome ufficiale\\" come insieme unico (tipo SOLID), ma vengono spesso citati insieme in contesti come:","sidebar":"tutorialSidebar"},"principi-fontamentali/best-practices/kiss":{"id":"principi-fontamentali/best-practices/kiss","title":"KISS - Keep It Simple, Stupid","description":"E\' un principio fondamentale della programmazione e dell\'ingegneria del software","sidebar":"tutorialSidebar"},"principi-fontamentali/best-practices/yagni":{"id":"principi-fontamentali/best-practices/yagni","title":"YAGNI - You Aren\u2019t Gonna Need It","description":"E\' un acronimo che sta per:","sidebar":"tutorialSidebar"},"principi-fontamentali/index":{"id":"principi-fontamentali/index","title":"Principi Fondamentali","description":"In questa sezione si parler\xe0 essenzialmente di un insieme di linee guida per scrivere codice","sidebar":"tutorialSidebar"},"principi-fontamentali/oop/ereditariet\xe0":{"id":"principi-fontamentali/oop/ereditariet\xe0","title":"Ereditariet\xe0","description":"Permette di creare nuove classi che riutilizzano, estendono o modificano il comportamento di una classe esistente.","sidebar":"tutorialSidebar"},"principi-fontamentali/oop/incapsulamento":{"id":"principi-fontamentali/oop/incapsulamento","title":"Incapsulamento","description":"Consiste nel nascondere i dettagli interni di un oggetto e nell\'esporre solo ci\xf2 che \xe8 necessario tramite metodi o propriet\xe0.","sidebar":"tutorialSidebar"},"principi-fontamentali/oop/index":{"id":"principi-fontamentali/oop/index","title":"OOP","description":"E\' un paradigma che utilizza \\"oggetti\\" per rappresentare dati e comportamenti.","sidebar":"tutorialSidebar"},"principi-fontamentali/oop/polimorfismo":{"id":"principi-fontamentali/oop/polimorfismo","title":"Polimorfismo","description":"Il termine polimorfismo deriva dal greco e significa \u201cmolte forme\u201d.","sidebar":"tutorialSidebar"},"principi-fontamentali/solid/dependency-inversion":{"id":"principi-fontamentali/solid/dependency-inversion","title":"Dependency Inversion Principle (DIP)","description":"E\' il quinto e ultimo principio SOLID.","sidebar":"tutorialSidebar"},"principi-fontamentali/solid/index":{"id":"principi-fontamentali/solid/index","title":"Principi SOLID","description":"Sono cinque linee guida per scrivere codice orientato agli oggetti pi\xf9 chiaro e manutenibile:","sidebar":"tutorialSidebar"},"principi-fontamentali/solid/interfaced-segregation":{"id":"principi-fontamentali/solid/interfaced-segregation","title":"Interface Segregation Principle (ISP)","description":"E\' il quarto principio dei SOLID.","sidebar":"tutorialSidebar"},"principi-fontamentali/solid/liskov-substitution":{"id":"principi-fontamentali/solid/liskov-substitution","title":"Liskov Substitution Principle (LSP)","description":"E\' il terzo principio SOLID e riguarda il modo in cui le classi derivate devono comportarsi rispetto alle classi base.","sidebar":"tutorialSidebar"},"principi-fontamentali/solid/open-close":{"id":"principi-fontamentali/solid/open-close","title":"Open/Closed Principle (OCP)","description":"E\' il secondo dei principi SOLID e afferma che:","sidebar":"tutorialSidebar"},"principi-fontamentali/solid/single-responsability":{"id":"principi-fontamentali/solid/single-responsability","title":"Single Responsibility Principle (SRP)","description":"E\' il primo principio dei SOLID la cui definizione \xe8:","sidebar":"tutorialSidebar"}}}}')}}]);