"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4457],{5438:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"languages/c-plus-plus/move-assignment-operator","title":"Move assignment operator","description":"Il move assignment operator (operatore di assegnazione per spostamento) \xe8 un costrutto speciale che permette di trasferire le risorse da un oggetto temporaneo o trasferibile (un rvalue) a un altro oggetto gi\xe0 esistente, evitando copie inutili.","source":"@site/content/languages/c-plus-plus/move-assignment-operator.md","sourceDirName":"languages/c-plus-plus","slug":"/languages/c-plus-plus/move-assignment-operator","permalink":"/docs/content/languages/c-plus-plus/move-assignment-operator","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/languages/c-plus-plus/move-assignment-operator.md","tags":[],"version":"current","frontMatter":{"title":"Move assignment operator"},"sidebar":"tutorialSidebar","previous":{"title":"LValue & Rvalue","permalink":"/docs/content/languages/c-plus-plus/lvalue-rvalue"},"next":{"title":"Operatori bitwise","permalink":"/docs/content/languages/c-plus-plus/operatori-bitwise"}}');var s=o(4848),i=o(8453);const a={title:"Move assignment operator"},r=void 0,l={},c=[{value:"Forma tipica",id:"forma-tipica",level:3},{value:"Esempio semplificato",id:"esempio-semplificato",level:3},{value:"Funzionamento interno",id:"funzionamento-interno",level:3},{value:"Quando viene chiamato",id:"quando-viene-chiamato",level:3},{value:"Differenza con il copy assignment",id:"differenza-con-il-copy-assignment",level:3}];function d(e){const n={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Il move assignment operator (operatore di assegnazione per spostamento) \xe8 un costrutto speciale che permette di trasferire le risorse da un oggetto temporaneo o trasferibile (un rvalue) a un altro oggetto gi\xe0 esistente, evitando copie inutili."}),"\n",(0,s.jsx)(n.p,{children:"Quando assegni un oggetto a un altro, in genere si fa una copia dei dati (copy assignment operator).\r\nMa se l\u2019oggetto sorgente \xe8 temporaneo (per esempio il risultato di una funzione o un std::move), non ha senso duplicare i dati: possiamo trasferire le risorse interne invece di copiarle."}),"\n",(0,s.jsx)(n.h3,{id:"forma-tipica",children:"Forma tipica"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"ClassName& operator=(ClassName&& other) noexcept;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ClassName&&"})," \u2192 accetta un ",(0,s.jsx)(n.code,{children:"rvalue"})," reference (oggetto temporaneo o passato tramite ",(0,s.jsx)(n.code,{children:"std::move"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"noexcept"})," \u2192 buona pratica, cos\xec container STL come ",(0,s.jsx)(n.code,{children:"std::vector"})," possono ottimizzare."]}),"\n",(0,s.jsxs)(n.li,{children:["Ritorna ",(0,s.jsx)(n.code,{children:"*this"})," per consentire le assegnazioni concatenate ",(0,s.jsx)(n.code,{children:"(a = b = c)."})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"esempio-semplificato",children:"Esempio semplificato"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"T a;\r\nT b;\r\nb = std::move(a); // qui entra in gioco il move assignment\n"})}),"\n",(0,s.jsx)(n.h3,{id:"funzionamento-interno",children:"Funzionamento interno"}),"\n",(0,s.jsx)(n.p,{children:"Il corpo tipico di un move assignment operator:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Autocheck: se stai assegnando l\u2019oggetto a se stesso, non fare nulla"}),"\n",(0,s.jsx)(n.li,{children:"Dealloca eventuali risorse dell\u2019oggetto di destinazione (per evitare memory leak)"}),"\n",(0,s.jsxs)(n.li,{children:["Trasferisci i puntatori o le risorse dal other a ",(0,s.jsx)(n.code,{children:"*this "})]}),"\n",(0,s.jsx)(n.li,{children:"Resetta l\u2019oggetto other in uno stato \u201cvalido ma vuoto\u201d"}),"\n",(0,s.jsxs)(n.li,{children:["Ritorna ",(0,s.jsx)(n.code,{children:"*this "})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"quando-viene-chiamato",children:"Quando viene chiamato"}),"\n",(0,s.jsx)(n.p,{children:"Il move assignment viene usato quando:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Stai assegnando un rvalue (obj = MyClass(10);)"}),"\n",(0,s.jsx)(n.li,{children:"Oppure stai forzando lo spostamento con std::move (obj = std::move(other);)."}),"\n",(0,s.jsx)(n.li,{children:"Se la classe non definisce un move assignment personalizzato, il compilatore pu\xf2 generarne uno automaticamente (dal C++11 in poi), a patto che sia possibile spostare i membri."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"differenza-con-il-copy-assignment",children:"Differenza con il copy assignment"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.th,{children:["Copy assignment (",(0,s.jsx)(n.code,{children:"T& operator=(const T&)"}),")"]}),(0,s.jsxs)(n.th,{children:["Move assignment (",(0,s.jsx)(n.code,{children:"T& operator=(T&&)"}),")"]})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Duplica le risorse"}),(0,s.jsx)(n.td,{children:"Trasferisce le risorse"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Potenzialmente costoso"}),(0,s.jsx)(n.td,{children:"Pi\xf9 veloce (no allocazioni inutili)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Usa l'oggetto sorgente senza modificarlo"}),(0,s.jsx)(n.td,{children:"Svuota l'oggetto sorgente"})]})]})]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>r});var t=o(6540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);