"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5070],{1660:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"design-patterns/creazionali/factory","title":"Factory","description":"Il Factory Pattern \xe8 un pattern creazionale che fornisce un\u2019interfaccia per creare oggetti in una superclasse, lasciando alle sottoclassi la decisione su quale classe concreta istanziare.","source":"@site/content/design-patterns/creazionali/factory.md","sourceDirName":"design-patterns/creazionali","slug":"/design-patterns/creazionali/factory","permalink":"/docs/content/design-patterns/creazionali/factory","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/design-patterns/creazionali/factory.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Factory","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Singleton","permalink":"/docs/content/design-patterns/creazionali/singleton"},"next":{"title":"Strutturali","permalink":"/docs/content/design-patterns/strutturali/"}}');var c=i(4848),a=i(8453);const t={title:"Factory",sidebar_position:2},s=void 0,o={},l=[{value:"Quando usarlo \u2705",id:"quando-usarlo-",level:3},{value:"Quando NON usarlo \u274c",id:"quando-non-usarlo-",level:3},{value:"Esempio",id:"esempio",level:3},{value:"Interfaccia",id:"interfaccia",level:4},{value:"Classi concrete",id:"classi-concrete",level:4},{value:"Enum per i tipi di nemico",id:"enum-per-i-tipi-di-nemico",level:4},{value:"Factory",id:"factory",level:4},{value:"Utilizzo",id:"utilizzo",level:4}];function d(e){const n={br:"br",code:"code",em:"em",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.p,{children:["Il ",(0,c.jsx)(n.strong,{children:"Factory Pattern"})," \xe8 un pattern ",(0,c.jsx)(n.strong,{children:"creazionale"})," che fornisce un\u2019interfaccia per creare oggetti in una superclasse, lasciando alle sottoclassi la decisione su quale classe concreta istanziare.",(0,c.jsx)(n.br,{}),"\n","In parole semplici: invece di usare direttamente ",(0,c.jsx)(n.code,{children:"new"})," nel codice, demandi a un metodo/funzione dedicata la logica di creazione dell\u2019oggetto."]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Obiettivi principali"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Disaccoppiare"})," la logica di creazione dal resto del codice."]}),"\n",(0,c.jsxs)(n.li,{children:["Rendere il codice ",(0,c.jsx)(n.strong,{children:"pi\xf9 flessibile"})," quando si aggiungono nuovi tipi di oggetti."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Centralizzare"})," la logica di creazione per facilitare modifiche future."]}),"\n"]}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h3,{id:"quando-usarlo-",children:"Quando usarlo \u2705"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Hai una logica di creazione complessa o ripetitiva."}),"\n",(0,c.jsx)(n.li,{children:"Vuoi poter aggiungere nuovi tipi di oggetti senza modificare il codice esistente."}),"\n",(0,c.jsx)(n.li,{children:"Non vuoi che il codice client conosca i dettagli delle classi concrete."}),"\n",(0,c.jsxs)(n.li,{children:["Vuoi seguire il ",(0,c.jsx)(n.strong,{children:"principio Open/Closed"})," (",(0,c.jsx)(n.em,{children:"open for extension, closed for modification"}),")."]}),"\n"]}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h3,{id:"quando-non-usarlo-",children:"Quando NON usarlo \u274c"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["La creazione \xe8 semplice (un singolo ",(0,c.jsx)(n.code,{children:"new"})," senza logica aggiuntiva)."]}),"\n",(0,c.jsx)(n.li,{children:"Non prevedi cambiamenti futuri nei tipi di oggetti."}),"\n",(0,c.jsxs)(n.li,{children:["Il pattern aggiungerebbe solo ",(0,c.jsx)(n.strong,{children:"complessit\xe0 inutile"}),"."]}),"\n",(0,c.jsxs)(n.li,{children:["Puoi ottenere lo stesso risultato con ",(0,c.jsx)(n.strong,{children:"Dependency Injection"})," o ",(0,c.jsx)(n.strong,{children:"ScriptableObjects"})," (in Unity) senza aumentare l\u2019overhead."]}),"\n"]}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h3,{id:"esempio",children:"Esempio"}),"\n",(0,c.jsxs)(n.p,{children:["Immaginiamo un gioco in cui vogliamo creare diversi tipi di nemici (",(0,c.jsx)(n.code,{children:"Orc"}),", ",(0,c.jsx)(n.code,{children:"Goblin"}),", ",(0,c.jsx)(n.code,{children:"Troll"}),") senza che il codice client sappia quale classe usare."]}),"\n",(0,c.jsx)(n.h4,{id:"interfaccia",children:"Interfaccia"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:"public interface IEnemy\r\n{\r\n    void Attack();\r\n}\n"})}),"\n",(0,c.jsx)(n.h4,{id:"classi-concrete",children:"Classi concrete"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:'public class Orc : IEnemy\r\n{\r\n    public void Attack() => Debug.Log("Orc attacca con l\'ascia!");\r\n}\r\n\r\npublic class Goblin : IEnemy\r\n{\r\n    public void Attack() => Debug.Log("Goblin lancia una pietra!");\r\n}\r\n\r\npublic class Troll : IEnemy\r\n{\r\n    public void Attack() => Debug.Log("Troll colpisce con un masso!");\r\n}\n'})}),"\n",(0,c.jsx)(n.h4,{id:"enum-per-i-tipi-di-nemico",children:"Enum per i tipi di nemico"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:"public enum EnemyType\r\n{\r\n    Orc,\r\n    Goblin,\r\n    Troll\r\n}\n"})}),"\n",(0,c.jsx)(n.h4,{id:"factory",children:"Factory"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:'public static class EnemyFactory\r\n{\r\n    public static IEnemy CreateEnemy(EnemyType type)\r\n    {\r\n        switch (type)\r\n        {\r\n            case EnemyType.Orc:\r\n                return new Orc();\r\n            case EnemyType.Goblin:\r\n                return new Goblin();\r\n            case EnemyType.Troll:\r\n                return new Troll();\r\n            default:\r\n                throw new System.ArgumentException("Tipo di nemico non supportato");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,c.jsx)(n.h4,{id:"utilizzo",children:"Utilizzo"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-csharp",children:"public class GameManager : MonoBehaviour\r\n{\r\n    void Start()\r\n    {\r\n        IEnemy enemy1 = EnemyFactory.CreateEnemy(EnemyType.Orc);\r\n        enemy1.Attack();\r\n\r\n        IEnemy enemy2 = EnemyFactory.CreateEnemy(EnemyType.Goblin);\r\n        enemy2.Attack();\r\n    }\r\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>s});var r=i(6540);const c={},a=r.createContext(c);function t(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:t(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);