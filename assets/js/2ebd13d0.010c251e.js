"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[130],{1398:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"languages/c-plus-plus/versions","title":"Versioni","description":"| Versione | Focus principale                                  | Esempi chiave                                                   |","source":"@site/content/languages/c-plus-plus/versions.md","sourceDirName":"languages/c-plus-plus","slug":"/languages/c-plus-plus/versions","permalink":"/docs/content/languages/c-plus-plus/versions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/languages/c-plus-plus/versions.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Versioni","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Pathfinding","permalink":"/docs/content/algoritmi/pathfinding"},"next":{"title":"Copy Constructor","permalink":"/docs/content/languages/c-plus-plus/constructor-copy"}}');var t=n(4848),l=n(8453);const r={title:"Versioni",sidebar_position:1},o=void 0,a={},c=[{value:"C++11 (2011)",id:"c11-2011",level:2},{value:"C++14 (2014)",id:"c14-2014",level:2},{value:"C++17 (2017)",id:"c17-2017",level:2},{value:"C++20 (2020)",id:"c20-2020",level:2}];function d(e){const i={h2:"h2",hr:"hr",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Versione"}),(0,t.jsx)(i.th,{children:"Focus principale"}),(0,t.jsx)(i.th,{children:"Esempi chiave"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"C++11"}),(0,t.jsx)(i.td,{children:"Modernizzazione, move semantics, concurrency"}),(0,t.jsx)(i.td,{children:"lambda, smart pointers, auto, nullptr"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"C++14"}),(0,t.jsx)(i.td,{children:"Raffinamenti e miglioramenti"}),(0,t.jsx)(i.td,{children:"generic lambdas, relaxed constexpr"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"C++17"}),(0,t.jsx)(i.td,{children:"Produttivit\xe0, qualit\xe0 del codice"}),(0,t.jsx)(i.td,{children:"if constexpr, structured bindings, optional/variant, filesystem"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"C++20"}),(0,t.jsx)(i.td,{children:"Modernit\xe0, sicurezza template, coroutines, moduli"}),(0,t.jsx)(i.td,{children:"concepts, coroutines, modules, spaceship operator, ranges"})]})]})]}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h2,{id:"c11-2011",children:"C++11 (2011)"}),"\n",(0,t.jsx)(i.p,{children:"\xc8 stata una rivoluzione nel linguaggio, introdusse molte nuove funzionalit\xe0 chiave:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Auto e decltype per deduzione del tipo"}),"\n",(0,t.jsx)(i.li,{children:"Lambda expressions: funzioni anonime"}),"\n",(0,t.jsx)(i.li,{children:"Smart pointers (std::unique_ptr, std::shared_ptr)"}),"\n",(0,t.jsx)(i.li,{children:"Move semantics con rvalue references (&&) e std::move"}),"\n",(0,t.jsx)(i.li,{children:"Concurrency: thread, mutex, futures, atomics nel thread"}),"\n",(0,t.jsx)(i.li,{children:"Range-based for loop"}),"\n",(0,t.jsx)(i.li,{children:"Uniform initialization"}),"\n",(0,t.jsx)(i.li,{children:"nullptr al posto di NULL"}),"\n",(0,t.jsx)(i.li,{children:"Static assertions (static_assert)"}),"\n",(0,t.jsx)(i.li,{children:"Strongly typed enums (enum class)"}),"\n",(0,t.jsx)(i.li,{children:"Nuove librerie: tuple, chrono, regex"}),"\n",(0,t.jsx)(i.li,{children:"Variadic templates"}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"c14-2014",children:"C++14 (2014)"}),"\n",(0,t.jsx)(i.p,{children:"Pi\xf9 che nuove feature radicali, C++14 \xe8 stato un raffinamento e una correzione di C++11:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Generic lambdas (lambda con parametri auto)"}),"\n",(0,t.jsx)(i.li,{children:"Relaxed constexpr: pi\xf9 funzioni possono essere constexpr"}),"\n",(0,t.jsx)(i.li,{children:"Return type deduction per funzioni (auto return type)"}),"\n",(0,t.jsx)(i.li,{children:"Variable templates"}),"\n",(0,t.jsx)(i.li,{children:"std::make_unique (manca in C++11)"}),"\n",(0,t.jsx)(i.li,{children:"Miglioramenti a auto e deduzione del tipo"}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"c17-2017",children:"C++17 (2017)"}),"\n",(0,t.jsx)(i.p,{children:"Ancora pi\xf9 orientato alla semplicit\xe0, efficienza e qualit\xe0 del codice:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"If constexpr: condizionale a compile-time"}),"\n",(0,t.jsx)(i.li,{children:"Structured bindings: destrutturazione di tuple, pair, struct"}),"\n",(0,t.jsx)(i.li,{children:"Fold expressions per template variadici"}),"\n",(0,t.jsx)(i.li,{children:"Nuovo tipo std::optional, std::variant, std::any"}),"\n",(0,t.jsx)(i.li,{children:"Parallel STL algorithms (esecuzione parallela)"}),"\n",(0,t.jsx)(i.li,{children:"Filesystem library (filesystem)"}),"\n",(0,t.jsx)(i.li,{children:"Inline variables (variabili inline a livello di header)"}),"\n",(0,t.jsx)(i.li,{children:"Miglioramento di constexpr e lambda (lambda constexpr)"}),"\n",(0,t.jsx)(i.li,{children:"Nuove keyword: [[nodiscard]]"}),"\n",(0,t.jsx)(i.li,{children:"Eliminazione di alcune feature obsolete"}),"\n",(0,t.jsx)(i.li,{children:"std::string_view: stringhe \u201cview\u201d senza copia"}),"\n",(0,t.jsx)(i.li,{children:"Template deduction per classi (deduzione automatica del tipo dei template)"}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"c20-2020",children:"C++20 (2020)"}),"\n",(0,t.jsx)(i.p,{children:"Una delle versioni pi\xf9 ricche di novit\xe0 dopo C++11, con molte feature moderne:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Concepts: constraint per template, pi\xf9 leggibilit\xe0 e sicurezza"}),"\n",(0,t.jsx)(i.li,{children:"Ranges library: manipolazione pi\xf9 semplice di sequenze"}),"\n",(0,t.jsx)(i.li,{children:"Coroutines: supporto nativo per async/await"}),"\n",(0,t.jsx)(i.li,{children:"Modules: sistema di moduli per compilazione pi\xf9 veloce e migliore gestione dipendenze"}),"\n",(0,t.jsx)(i.li,{children:"Calendar & timezone nel chrono"}),"\n",(0,t.jsx)(i.li,{children:"constexpr pi\xf9 potente (quasi tutte le librerie STL possono essere constexpr)"}),"\n",(0,t.jsx)(i.li,{children:"consteval e constinit per costanti a compile-time"}),"\n",(0,t.jsx)(i.li,{children:"Immediate functions (consteval)"}),"\n",(0,t.jsx)(i.li,{children:"New operators (spaceship operator per confronto)"}),"\n",(0,t.jsx)(i.li,{children:"Designated initializers (come in C99)"}),"\n",(0,t.jsx)(i.li,{children:"Template parameter lists migliorati (template lambdas, template template parameters migliorati)"}),"\n",(0,t.jsx)(i.li,{children:"std::span: view non-owning di array e buffer"}),"\n",(0,t.jsx)(i.li,{children:"Coroutines support per funzioni asincrone"}),"\n",(0,t.jsx)(i.li,{children:"Miglioramenti a constexpr e lambda (lambda con template parameters)"}),"\n"]})]})}function p(e={}){const{wrapper:i}={...(0,l.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>o});var s=n(6540);const t={},l=s.createContext(t);function r(e){const i=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(l.Provider,{value:i},e.children)}}}]);