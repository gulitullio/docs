"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5386],{1201:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"design-patterns/comportamentali/observer","title":"Observer","description":"E\' un pattern comportamentale che definisce una relazione uno-a-molti tra oggetti, in modo che quando uno stato dell\u2019oggetto osservato (subject) cambia, tutti gli osservatori (observers) vengano notificati automaticamente.","source":"@site/content/design-patterns/comportamentali/observer.md","sourceDirName":"design-patterns/comportamentali","slug":"/design-patterns/comportamentali/observer","permalink":"/docs/content/design-patterns/comportamentali/observer","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/design-patterns/comportamentali/observer.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Observer","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Comportamentali","permalink":"/docs/content/design-patterns/comportamentali/"},"next":{"title":"Strategy","permalink":"/docs/content/design-patterns/comportamentali/strategy"}}');var s=r(4848),t=r(8453);const a={title:"Observer",sidebar_position:1},o=void 0,l={},c=[{value:"Quando usarlo \u2705",id:"quando-usarlo-",level:3},{value:"Quando NON usarlo \u274c",id:"quando-non-usarlo-",level:3},{value:"Esempio",id:"esempio",level:3},{value:"Interfaccia Observer",id:"interfaccia-observer",level:4},{value:"Observer: UI",id:"observer-ui",level:4},{value:"Observer: Audio",id:"observer-audio",level:4},{value:"Subject",id:"subject",level:4},{value:"Utilizzo",id:"utilizzo",level:4}];function d(e){const n={code:"code",em:"em",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["E' un pattern ",(0,s.jsx)(n.strong,{children:"comportamentale"})," che definisce una ",(0,s.jsx)(n.strong,{children:"relazione uno-a-molti"})," tra oggetti, in modo che quando uno stato dell\u2019oggetto osservato (",(0,s.jsx)(n.em,{children:"subject"}),") cambia, tutti gli osservatori (",(0,s.jsx)(n.em,{children:"observers"}),") vengano notificati automaticamente."]}),"\n",(0,s.jsx)(n.p,{children:'In termini semplici: il Subject "avvisa" tutti gli iscritti (Observers) quando succede qualcosa di interessante, senza sapere chi sono o cosa fanno.'}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Obiettivi principali"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Disaccoppiare chi ",(0,s.jsx)(n.strong,{children:"emette eventi"})," (Subject) da chi ",(0,s.jsx)(n.strong,{children:"li riceve"})," (Observers)."]}),"\n",(0,s.jsxs)(n.li,{children:["Rendere il sistema ",(0,s.jsx)(n.strong,{children:"estensibile"})," senza modificare il codice esistente."]}),"\n",(0,s.jsxs)(n.li,{children:["Favorire la ",(0,s.jsx)(n.strong,{children:"comunicazione asincrona"})," e la ",(0,s.jsx)(n.strong,{children:"modularit\xe0"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"quando-usarlo-",children:"Quando usarlo \u2705"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Pi\xf9 oggetti devono reagire a cambiamenti di stato di un altro oggetto."}),"\n",(0,s.jsxs)(n.li,{children:["Vuoi evitare ",(0,s.jsx)(n.strong,{children:"dipendenze dirette"})," tra componenti."]}),"\n",(0,s.jsxs)(n.li,{children:["L\u2019evento pu\xf2 avere ",(0,s.jsx)(n.strong,{children:"pi\xf9 listener"})," e questi listener possono cambiare dinamicamente."]}),"\n",(0,s.jsxs)(n.li,{children:["Vuoi seguire il ",(0,s.jsx)(n.strong,{children:"principio Open/Closed"}),": aggiungere nuovi osservatori senza modificare il Subject."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"quando-non-usarlo-",children:"Quando NON usarlo \u274c"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"C\u2019\xe8 un solo destinatario dell\u2019evento (in quel caso un callback diretto \xe8 pi\xf9 semplice)."}),"\n",(0,s.jsx)(n.li,{children:"Le dipendenze sono statiche e non cambieranno mai."}),"\n",(0,s.jsxs)(n.li,{children:["Il flusso degli eventi \xe8 ",(0,s.jsx)(n.strong,{children:"semplice"})," e non richiede un meccanismo centralizzato."]}),"\n",(0,s.jsxs)(n.li,{children:["Vuoi evitare ",(0,s.jsx)(n.strong,{children:"complessit\xe0 di debugging"})," dovuta a eventi che si propagano in modo implicito."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"esempio",children:"Esempio"}),"\n",(0,s.jsxs)(n.p,{children:["Immaginiamo un sistema in cui un oggetto (",(0,s.jsx)(n.code,{children:"Player"}),") notifica altri sistemi (UI, Audio, Achievements) quando cambia la salute."]}),"\n",(0,s.jsx)(n.h4,{id:"interfaccia-observer",children:"Interfaccia Observer"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public interface IHealthObserver\r\n{\r\n    void OnHealthChanged(int newHealth);\r\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"observer-ui",children:"Observer: UI"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class HealthUI : MonoBehaviour, IHealthObserver\r\n{\r\n    public void OnHealthChanged(int newHealth)\r\n    {\r\n        Debug.Log($"[UI] Aggiorna barra salute a {newHealth}");\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"observer-audio",children:"Observer: Audio"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class HealthAudio : MonoBehaviour, IHealthObserver\r\n{\r\n    public void OnHealthChanged(int newHealth)\r\n    {\r\n        if (newHealth <= 30)\r\n            Debug.Log("[Audio] Riproduci suono di bassa salute");\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"subject",children:"Subject"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class Player : MonoBehaviour\r\n{\r\n    private List<IHealthObserver> observers = new List<IHealthObserver>();\r\n    private int health = 100;\r\n\r\n    public void AddObserver(IHealthObserver observer)\r\n    {\r\n        if (!observers.Contains(observer))\r\n            observers.Add(observer);\r\n    }\r\n\r\n    public void RemoveObserver(IHealthObserver observer)\r\n    {\r\n        observers.Remove(observer);\r\n    }\r\n\r\n    public void TakeDamage(int amount)\r\n    {\r\n        health = Mathf.Max(health - amount, 0);\r\n        Debug.Log($"Player health: {health}");\r\n        NotifyObservers();\r\n    }\r\n\r\n    private void NotifyObservers()\r\n    {\r\n        foreach (var observer in observers)\r\n            observer.OnHealthChanged(health);\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"utilizzo",children:"Utilizzo"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class GameSetup : MonoBehaviour\r\n{\r\n    public Player player;\r\n    public HealthUI healthUI;\r\n    public HealthAudio healthAudio;\r\n\r\n    void Start()\r\n    {\r\n        player.AddObserver(healthUI);\r\n        player.AddObserver(healthAudio);\r\n\r\n        player.TakeDamage(20);\r\n        player.TakeDamage(60);\r\n    }\r\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var i=r(6540);const s={},t=i.createContext(s);function a(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);