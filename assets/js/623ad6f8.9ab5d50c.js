"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2891],{2790:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"architetture/layer","title":"Layered Architecture (Architettura a livelli)","description":"Il Layered Architecture (o \u201carchitettura a strati\u201d) \xe8 un modello di progettazione del software dove il codice \xe8 organizzato in livelli distinti, ognuno con un compito chiaro. Ogni layer comunica solo con quello immediatamente sottostante (o, in alcuni casi, tramite interfacce ben definite).","source":"@site/content/architetture/layer.md","sourceDirName":"architetture","slug":"/architetture/layer","permalink":"/docs/content/architetture/layer","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/architetture/layer.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Layered Architecture (Architettura a livelli)","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"MVVM (Model-View-ViewModel)","permalink":"/docs/content/architetture/mvvm"},"next":{"title":"Component-Based Architecture","permalink":"/docs/content/architetture/component-based"}}');var t=n(4848),a=n(8453);const o={title:"Layered Architecture (Architettura a livelli)",sidebar_position:3},l=void 0,s={},c=[{value:"Perch\xe9 usarlo",id:"perch\xe9-usarlo",level:3},{value:"Quando usarlo",id:"quando-usarlo",level:3},{value:"Esempio",id:"esempio",level:3},{value:"Domain",id:"domain",level:4},{value:"Infrastructure Layer",id:"infrastructure-layer",level:4},{value:"Application Layer",id:"application-layer",level:4},{value:"Presentation Layer (Unity)",id:"presentation-layer-unity",level:4}];function d(e){const r={code:"code",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:["Il Layered Architecture (o \u201carchitettura a strati\u201d) \xe8 un modello di progettazione del software dove il codice \xe8 organizzato in ",(0,t.jsx)(r.strong,{children:"livelli distinti"}),", ognuno con un compito chiaro. Ogni layer ",(0,t.jsx)(r.strong,{children:"comunica solo con quello immediatamente sottostante"})," (o, in alcuni casi, tramite interfacce ben definite)."]}),"\n",(0,t.jsx)(r.p,{children:"Struttura tipica:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Presentation Layer (UI)"})," \u2192 interagisce con l\u2019utente/giocatore"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Application Layer"})," \u2192 coordina i casi d\u2019uso, applica logica di flusso"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Domain Layer"})," \u2192 contiene la logica di gioco (regole, validazioni, ecc.)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Infrastructure Layer"})," \u2192 si occupa di persistenza, file, rete, database, API"]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"perch\xe9-usarlo",children:"Perch\xe9 usarlo"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Mantenibilit\xe0"})," \u2192 Ogni parte \xe8 separata, modificabile senza toccare il resto"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Testabilit\xe0"})," \u2192 Il dominio e l\u2019applicazione possono essere testati senza caricare dipendenze"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Riutilizzo"})," \u2192 La logica di gioco pu\xf2 essere riutilizzata in altri progetti"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Scalabilit\xe0"})," \u2192 Il progetto cresce in modo ordinato senza diventare \u201cspaghetti code\u201d"]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"quando-usarlo",children:"Quando usarlo"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Per evitare che ogni script sia un miscuglio di UI, gameplay e salvataggio."}),"\n",(0,t.jsx)(r.li,{children:"Per rendere pi\xf9 semplice cambiare motore grafico o sistema di input."}),"\n",(0,t.jsx)(r.li,{children:"Per separare la logica dal rendering e dagli oggetti."}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"esempio",children:"Esempio"}),"\n",(0,t.jsx)(r.p,{children:"Un\u2019architettura a strati di esempio potrebbe essere la seguente:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"I MonoBehaviour vivono solo nel Presentation Layer (UI)"}),"\n",(0,t.jsx)(r.li,{children:"La logica core del gioco vive nel Domain Layer (classi pure, senza dipendere da Unity)."}),"\n",(0,t.jsx)(r.li,{children:"La gestione di file, DB o API \xe8 delegata all\u2019Infrastructure Layer."}),"\n",(0,t.jsx)(r.li,{children:"La coordinazione delle azioni (ad esempio \u201cavvia partita\u201d, \u201caggiorna punteggio\u201d) avviene nell\u2019Application Layer."}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"domain",children:"Domain"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'public class Player\r\n{\r\n    public string Name { get; private set; }\r\n    public int Score { get; private set; }\r\n\r\n    public Player(string name)\r\n    {\r\n        Name = name;\r\n        Score = 0;\r\n    }\r\n\r\n    public void AddScore(int points)\r\n    {\r\n        if (points < 0) throw new System.ArgumentException("Points cannot be negative");\r\n        Score += points;\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"infrastructure-layer",children:"Infrastructure Layer"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'public class PlayerDataRepository\r\n{\r\n    private string _savePath => Path.Combine(Application.persistentDataPath, "player.json");\r\n\r\n    public void Save(Player player)\r\n    {\r\n        string json = JsonUtility.ToJson(player);\r\n        File.WriteAllText(_savePath, json);\r\n    }\r\n\r\n    public Player Load()\r\n    {\r\n        if (!File.Exists(_savePath))\r\n            return new Player("Guest");\r\n\r\n        string json = File.ReadAllText(_savePath);\r\n        return JsonUtility.FromJson<Player>(json);\r\n    }\r\n}\r\n\n'})}),"\n",(0,t.jsx)(r.h4,{id:"application-layer",children:"Application Layer"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"public class GameService\r\n{\r\n    private Player _player;\r\n\r\n    public GameService(Player player)\r\n    {\r\n        _player = player;\r\n    }\r\n\r\n    public void AddPointsToPlayer(int points)\r\n    {\r\n        _player.AddScore(points);\r\n        // Qui potresti inviare eventi o notifiche alla UI\r\n    }\r\n\r\n    public int GetPlayerScore() => _player.Score;\r\n}\n"})}),"\n",(0,t.jsx)(r.h4,{id:"presentation-layer-unity",children:"Presentation Layer (Unity)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'public class GameUIController : MonoBehaviour\r\n{\r\n    [SerializeField] private Text scoreText;\r\n    private GameService _gameService;\r\n    private PlayerDataRepository _repository;\r\n\r\n    void Start()\r\n    {\r\n        _repository = new PlayerDataRepository();\r\n        var player = _repository.Load();\r\n        _gameService = new GameService(player);\r\n\r\n        UpdateUI();\r\n    }\r\n\r\n    public void OnAddPointsButtonClicked()\r\n    {\r\n        _gameService.AddPointsToPlayer(10);\r\n        UpdateUI();\r\n    }\r\n\r\n    private void UpdateUI()\r\n    {\r\n        scoreText.text = "Score: " + _gameService.GetPlayerScore();\r\n    }\r\n\r\n    private void OnApplicationQuit()\r\n    {\r\n        _repository.Save(new Player("Player") { /* eventualmente recupera i dati */ });\r\n    }\r\n}\n'})})]})}function p(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>l});var i=n(6540);const t={},a=i.createContext(t);function o(e){const r=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(a.Provider,{value:r},e.children)}}}]);