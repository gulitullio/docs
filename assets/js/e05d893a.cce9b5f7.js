"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6638],{4628:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>t,contentTitle:()=>l,default:()=>p,frontMatter:()=>c,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"languages/c-plus-plus/preprocessore","title":"Preprocessore","description":"Il preprocessore viene eseguito prima della compilazione vera e propria, e produce un unico file che viene successivamente passato al compilatore","source":"@site/content/languages/c-plus-plus/preprocessore.md","sourceDirName":"languages/c-plus-plus","slug":"/languages/c-plus-plus/preprocessore","permalink":"/docs/content/languages/c-plus-plus/preprocessore","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/languages/c-plus-plus/preprocessore.md","tags":[],"version":"current","frontMatter":{"title":"Preprocessore"},"sidebar":"tutorialSidebar","previous":{"title":"Operatori bitwise","permalink":"/docs/content/languages/c-plus-plus/operatori-bitwise"},"next":{"title":"Puntatori","permalink":"/docs/content/languages/c-plus-plus/puntatori"}}');var o=n(4848),s=n(8453);const c={title:"Preprocessore"},l=void 0,t={},a=[{value:"Capacit\xe0",id:"capacit\xe0",level:3}];function d(e){const i={br:"br",code:"code",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.p,{children:"Il preprocessore viene eseguito prima della compilazione vera e propria, e produce un unico file che viene successivamente passato al compilatore"}),"\n",(0,o.jsx)(i.p,{children:"Utilizza direttive che iniziano con #, ognuna su una riga separata, con nomi definiti dallo standard e relativi argomenti."}),"\n",(0,o.jsxs)(i.p,{children:["Esempi:\r\n",(0,o.jsx)(i.code,{children:"#define"}),", ",(0,o.jsx)(i.code,{children:"#undef"}),", ",(0,o.jsx)(i.code,{children:"#include"}),", cicli condizionali (",(0,o.jsx)(i.code,{children:"#if"}),", ",(0,o.jsx)(i.code,{children:"#ifdef"}),", ",(0,o.jsx)(i.code,{children:"#ifndef"}),", ",(0,o.jsx)(i.code,{children:"#else"}),", ",(0,o.jsx)(i.code,{children:"#elif"}),", ",(0,o.jsx)(i.code,{children:"#elifdef"}),", ",(0,o.jsx)(i.code,{children:"#elifndef"}),", ",(0,o.jsx)(i.code,{children:"#endif"}),"), ",(0,o.jsx)(i.code,{children:"#line"}),", ",(0,o.jsx)(i.code,{children:"#error"}),", ",(0,o.jsx)(i.code,{children:"#warning"}),", ",(0,o.jsx)(i.code,{children:"#pragma"}),", e nuove direttive come ",(0,o.jsx)(i.code,{children:"#embed"})," (in C23/C++26)"]}),"\n",(0,o.jsx)(i.h3,{id:"capacit\xe0",children:"Capacit\xe0"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"Compilazione condizionale"}),(0,o.jsx)(i.br,{}),"\n","Permette di includere o escludere porzioni di codice in base a condizioni tramite direttive quali #if, #ifdef, #ifndef, #else, #elif, #elifdef, #elifndef, #endif."]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"Espansione di macro"}),(0,o.jsx)(i.br,{}),"\n","Attraverso #define e #undef, \xe8 possibile definire o rimuovere macro, anche con concatenazione o inserimento di virgolette (# e ##)."]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"Inclusione di file"}),(0,o.jsx)(i.br,{}),"\n","Con #include \xe8 possibile includere il contenuto di altri file. L\u2019operatore __has_include (introdotto in C++17) consente di verificare se un file esiste prima dell\u2019inclusione."]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"Emissione di errori o avvisi"}),(0,o.jsx)(i.br,{}),"\n","La direttiva #error provoca un errore di compilazione, bloccando il processo, mentre #warning (dal C++23) emette un avviso ma non invalida il programma."]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"Controllo del comportamento specifico dell\u2019implementazione"}),(0,o.jsx)(i.br,{}),"\n","Con #pragma o _Pragma (da C++11) si pu\xf2 gestire comportamenti dipe**ndenti dal compilatore, come disabilitare avvisi o modificare l\u2019allineamento."]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"Gestione delle informazioni su file e linee"}),(0,o.jsx)(i.br,{}),"\n","La direttiva #line consente di modificare il numero di linea e il nome del file nel contesto del preprocessore\u2014utile soprattutto per strumenti automatici che generano codice."]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>c,x:()=>l});var r=n(6540);const o={},s=r.createContext(o);function c(e){const i=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),r.createElement(s.Provider,{value:i},e.children)}}}]);