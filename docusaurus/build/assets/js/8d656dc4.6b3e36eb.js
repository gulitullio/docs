"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[479],{6103:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"principi-fontamentali/oop/ereditariet\xe0","title":"Ereditariet\xe0","description":"Permette di creare nuove classi che riutilizzano, estendono o modificano il comportamento di una classe esistente.","source":"@site/content/principi-fontamentali/oop/ereditariet\xe0.md","sourceDirName":"principi-fontamentali/oop","slug":"/principi-fontamentali/oop/ereditariet\xe0","permalink":"/docs/content/principi-fontamentali/oop/ereditariet\xe0","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/principi-fontamentali/oop/ereditariet\xe0.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Ereditariet\xe0","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Incapsulamento","permalink":"/docs/content/principi-fontamentali/oop/incapsulamento"},"next":{"title":"Polimorfismo","permalink":"/docs/content/principi-fontamentali/oop/polimorfismo"}}');var t=n(4848),r=n(8453);const o={title:"Ereditariet\xe0",sidebar_position:2},s=void 0,c={},l=[{value:"Classe base",id:"classe-base",level:3},{value:"Classe derivata o figlia",id:"classe-derivata-o-figlia",level:3}];function d(e){const i={br:"br",code:"code",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.p,{children:"Permette di creare nuove classi che riutilizzano, estendono o modificano il comportamento di una classe esistente."}),"\n",(0,t.jsx)(i.p,{children:'In termini semplici, una classe derivata (o "figlia") eredita le propriet\xe0 e i metodi di una classe base (o "madre"), potendo aggiungere nuove funzionalit\xe0 o sovrascrivere quelle esistenti.'}),"\n",(0,t.jsxs)(i.p,{children:["Immaginiamo di avere un gioco in cui esistono diversi tipi di personaggi: guerrieri, maghi, arcieri.",(0,t.jsx)(i.br,{}),"\n","Tutti condividono alcune caratteristiche comuni come salute, danni, movimento.",(0,t.jsx)(i.br,{}),"\n","In questo caso, possiamo creare una classe base Character e poi creare classi derivate come Warrior, Mage, ecc."]}),"\n",(0,t.jsx)(i.h3,{id:"classe-base",children:"Classe base"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-cs",children:'public class Character\r\n{\r\n    public string Name { get; set; }\r\n    public int Health { get; protected set; }\r\n\r\n    public Character(string name, int health)\r\n    {\r\n        Name = name;\r\n        Health = health;\r\n    }\r\n\r\n    public virtual void Attack()\r\n    {\r\n        Console.WriteLine($"{Name} attacks with a basic strike!");\r\n    }\r\n\r\n    public void TakeDamage(int damage)\r\n    {\r\n        Health -= damage;\r\n        Console.WriteLine($"{Name} takes {damage} damage. Remaining health: {Health}");\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(i.h3,{id:"classe-derivata-o-figlia",children:"Classe derivata o figlia"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-cs",children:'public class Warrior : Character\r\n{\r\n    public Warrior(string name, int health) : base(name, health) {}\r\n\r\n    public override void Attack()\r\n    {\r\n        Console.WriteLine($"{Name} swings a mighty sword!");\r\n    }\r\n}\r\n\r\n// Derived class\r\npublic class Mage : Character\r\n{\r\n    public Mage(string name, int health) : base(name, health) {}\r\n\r\n    public override void Attack()\r\n    {\r\n        Console.WriteLine($"{Name} casts a fireball!");\r\n    }\r\n}\n'})})]})}function p(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>s});var a=n(6540);const t={},r=a.createContext(t);function o(e){const i=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),a.createElement(r.Provider,{value:i},e.children)}}}]);