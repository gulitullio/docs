"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5597],{8453:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>l});var a=n(6540);const r={},s=a.createContext(r);function t(e){const i=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),a.createElement(s.Provider,{value:i},e.children)}},8498:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"principi-fontamentali/solid/single-responsability","title":"Single Responsibility Principle (SRP)","description":"E\' il primo principio dei SOLID la cui definizione \xe8:","source":"@site/content/principi-fontamentali/solid/single-responsability.md","sourceDirName":"principi-fontamentali/solid","slug":"/principi-fontamentali/solid/single-responsability","permalink":"/docs/content/principi-fontamentali/solid/single-responsability","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/principi-fontamentali/solid/single-responsability.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Single Responsibility Principle (SRP)","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Principi SOLID","permalink":"/docs/content/principi-fontamentali/solid/"},"next":{"title":"Open/Closed Principle (OCP)","permalink":"/docs/content/principi-fontamentali/solid/open-close"}}');var r=n(4848),s=n(8453);const t={title:"Single Responsibility Principle (SRP)",sidebar_position:1},l=void 0,o={},c=[{value:"Vantaggi",id:"vantaggi",level:3},{value:"\u274c Esempio che viola il principio \u274c",id:"-esempio-che-viola-il-principio-",level:3},{value:"\u2705 Esempio corretto \u2705",id:"-esempio-corretto-",level:3}];function p(e){const i={blockquote:"blockquote",br:"br",code:"code",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.p,{children:"E' il primo principio dei SOLID la cui definizione \xe8:"}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:'"Una classe dovrebbe avere una, e una sola, responsabilit\xe0."'})}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["In pratica dovrebbe esistere una sola ragione per cui quella classe debba essere cambiata.",(0,r.jsx)(i.br,{}),"\n","Quando una classe ha pi\xf9 responsabilit\xe0, pu\xf2 diventare difficile da modificare, testare o estendere senza causare effetti collaterali inaspettati."]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"vantaggi",children:"Vantaggi"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Le classi sono pi\xf9 semplici da capire e da testare"}),"\n",(0,r.jsx)(i.li,{children:"I cambiamenti futuri non rischiano di rompere logiche gi\xe0 esistenti"}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"-esempio-che-viola-il-principio-",children:"\u274c Esempio che viola il principio \u274c"}),"\n",(0,r.jsx)(i.p,{children:"Supponiamo di avere un personaggio in un gioco che:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"gestisce la salute e i danni subiti"}),"\n",(0,r.jsx)(i.li,{children:"stampa le informazioni su schermo"}),"\n",(0,r.jsx)(i.li,{children:"salva i dati su file"}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["Tutte queste responsabilit\xe0 in ",(0,r.jsx)(i.strong,{children:"una sola classe"})," violano il principio di singola responsabilit\xe0."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-csharp",children:'public class Player\r\n{\r\n    public string Name { get; set; }\r\n    public int Health { get; private set; }\r\n\r\n    public Player(string name) {\r\n        Name = name;\r\n        Health = 100;\r\n    }\r\n\r\n    public void TakeDamage(int damage) {\r\n        Health = Math.Max(Health - damage, 0);\r\n    }\r\n\r\n\r\n    public void ShowStats() {\r\n        Console.WriteLine($"{p.Name} has {p.Health} HP.");\r\n    }\r\n\r\n    public void Save() {\r\n        File.WriteAllText("player.txt", $"{p.Name},{p.Health}");\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"-esempio-corretto-",children:"\u2705 Esempio corretto \u2705"}),"\n",(0,r.jsx)(i.p,{children:"Classe giocatore con la sola gestione della salute"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-csharp",children:"public class Player\r\n{\r\n    public string Name { get; set; }\r\n    public int Health { get; private set; }\r\n\r\n    public Player(string name) {\r\n        Name = name;\r\n        Health = 100;\r\n    }\r\n\r\n    public void TakeDamage(int damage) {\r\n        Health = Math.Max(Health - damage, 0);\r\n    }\r\n}\n"})}),"\n",(0,r.jsx)(i.p,{children:"Classe separata per mostrare le statistiche"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-csharp",children:'public class StatDisplayer\r\n{\r\n    public void ShowStats(Player p) {\r\n        Console.WriteLine($"{p.Name} has {p.Health} HP.");\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(i.p,{children:"Classe separata per salvare i dati del giocatore"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-csharp",children:'public class PlayerSaver\r\n{\r\n    public void Save(Player p) {\r\n        File.WriteAllText("player.txt", $"{p.Name},{p.Health}");\r\n    }\r\n}\r\n\n'})})]})}function d(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);