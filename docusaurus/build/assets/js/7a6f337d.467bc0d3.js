"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2192],{5711:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"principi-fontamentali/solid/dependency-inversion","title":"Dependency Inversion Principle (DIP)","description":"E\' il quinto e ultimo principio SOLID.","source":"@site/content/principi-fontamentali/solid/dependency-inversion.md","sourceDirName":"principi-fontamentali/solid","slug":"/principi-fontamentali/solid/dependency-inversion","permalink":"/docs/content/principi-fontamentali/solid/dependency-inversion","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/principi-fontamentali/solid/dependency-inversion.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Dependency Inversion Principle (DIP)","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Interface Segregation Principle (ISP)","permalink":"/docs/content/principi-fontamentali/solid/interfaced-segregation"},"next":{"title":"Best Practices","permalink":"/docs/content/principi-fontamentali/best-practices/"}}');var o=i(4848),s=i(8453);const a={title:"Dependency Inversion Principle (DIP)",sidebar_position:5},t=void 0,c={},l=[{value:"\u274c Esempio che viola il principio \u274c",id:"-esempio-che-viola-il-principio-",level:3},{value:"\u2705 Esempio corretto \u2705",id:"-esempio-corretto-",level:3}];function d(e){const n={blockquote:"blockquote",br:"br",code:"code",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"E' il quinto e ultimo principio SOLID."}),"\n",(0,o.jsx)(n.p,{children:"\xc8 fondamentale per scrivere codice disaccoppiato, flessibile e facile da testare."}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:'"Una classe non dovrebbe dipendere direttamente da classi concrete, ma da interfacce o astrazioni"'})}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["I moduli di alto livello non dovrebbero dipendere da moduli di basso livello, dovrebbero dipendere dalle astrazioni.",(0,o.jsx)(n.br,{}),"\n","Le astrazioni non dovrebbero dipendere dai dettagli ma, viceversa, i dettagli dovrebbero dipendere dalle astrazioni."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"-esempio-che-viola-il-principio-",children:"\u274c Esempio che viola il principio \u274c"}),"\n",(0,o.jsxs)(n.p,{children:["In questo esempio, una classe ",(0,o.jsx)(n.code,{children:"GameManager"})," dipende direttamente da una classe concreta ",(0,o.jsx)(n.code,{children:"FileLogger"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Non puoi facilmente sostituire ",(0,o.jsx)(n.code,{children:"FileLogger"})," con un altro sistema (es. ",(0,o.jsx)(n.code,{children:"ConsoleLogger"}),", ",(0,o.jsx)(n.code,{children:"DatabaseLogger"}),", ",(0,o.jsx)(n.code,{children:"MockLogger"}),")"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'public class FileLogger\r\n{\r\n    public void Log(string message) {\r\n        File.AppendAllText("log.txt", message + Environment.NewLine);\r\n    }\r\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'public class GameManager\r\n{\r\n    private FileLogger logger;\r\n\r\n    public GameManager() {\r\n        logger = new FileLogger(); // Tight coupling\r\n    }\r\n\r\n    public void StartGame() {\r\n        logger.Log("Game started.");\r\n    }\r\n}\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"-esempio-corretto-",children:"\u2705 Esempio corretto \u2705"}),"\n",(0,o.jsxs)(n.p,{children:["Definiamo un\u2019interfaccia ",(0,o.jsx)(n.code,{children:"ILogger"})," e usiamo l\u2019inversione delle dipendenze:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"public interface ILogger\r\n{\r\n    void Log(string message);\r\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'public class FileLogger : ILogger\r\n{\r\n    public void Log(string message) {\r\n        File.AppendAllText("log.txt", message + Environment.NewLine);\r\n    }\r\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"public class ConsoleLogger : ILogger\r\n{\r\n    public void Log(string message) {\r\n        Console.WriteLine(message);\r\n    }\r\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'public class GameManager\r\n{\r\n    private readonly ILogger logger;\r\n\r\n    public GameManager(ILogger logger) {\r\n        this.logger = logger;\r\n    }\r\n\r\n    public void StartGame() {\r\n        logger.Log("Game started.");\r\n    }\r\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"var logger = new FileLogger();\r\nvar gameManager = new GameManager(logger);\r\ngameManager.StartGame();\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>t});var r=i(6540);const o={},s=r.createContext(o);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);