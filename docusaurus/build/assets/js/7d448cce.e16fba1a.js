"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[501],{3503:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>t,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"principi-fontamentali/oop/polimorfismo","title":"Polimorfismo","description":"Il termine polimorfismo deriva dal greco e significa \u201cmolte forme\u201d.","source":"@site/content/principi-fontamentali/oop/polimorfismo.md","sourceDirName":"principi-fontamentali/oop","slug":"/principi-fontamentali/oop/polimorfismo","permalink":"/docs/docs/principi-fontamentali/oop/polimorfismo","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/content/principi-fontamentali/oop/polimorfismo.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Polimorfismo","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Ereditariet\xe0","permalink":"/docs/docs/principi-fontamentali/oop/ereditariet\xe0"},"next":{"title":"Principi SOLID","permalink":"/docs/docs/principi-fontamentali/solid"}}');var o=r(4848),a=r(8453);const t={title:"Polimorfismo",sidebar_position:3},s=void 0,c={},l=[{value:"Classe base",id:"classe-base",level:3},{value:"Classi derivate",id:"classi-derivate",level:3},{value:"Esempio di polimorfismo",id:"esempio-di-polimorfismo",level:3}];function p(e){const i={br:"br",code:"code",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(i.p,{children:["Il termine polimorfismo deriva dal greco e significa \u201cmolte forme\u201d.",(0,o.jsx)(i.br,{}),"\n","In programmazione, significa che lo stesso metodo pu\xf2 comportarsi in modo diverso a seconda dell\u2019oggetto che lo implementa."]}),"\n",(0,o.jsx)(i.p,{children:"Questo principio consente di utilizzare oggetti di classi diverse attraverso un\u2019interfaccia comune."}),"\n",(0,o.jsxs)(i.p,{children:["Immagina di avere un gioco in cui vari personaggi possono attaccare, ma ogni tipo di personaggio ha un modo diverso di attaccare.",(0,o.jsx)(i.br,{}),"\n","Usiamo il polimorfismo per chiamare il metodo Attack() su un elenco di personaggi, senza preoccuparci del loro tipo specifico."]}),"\n",(0,o.jsx)(i.h3,{id:"classe-base",children:"Classe base"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-cs",children:'public class Character\r\n{\r\n    public string Name { get; set; }\r\n\r\n    public Character(string name) {\r\n        Name = name;\r\n    }\r\n\r\n    public virtual void Attack() {\r\n        Console.WriteLine($"{Name} performs a generic attack.");\r\n    }\r\n}\n'})}),"\n",(0,o.jsx)(i.h3,{id:"classi-derivate",children:"Classi derivate"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-cs",children:'public class Archer : Character\r\n{\r\n    public Archer(string name) : base(name) { }\r\n\r\n    public override void Attack() {\r\n        Console.WriteLine($"{Name} shoots an arrow!");\r\n    }\r\n}\r\n\r\npublic class Knight : Character\r\n{\r\n    public Knight(string name) : base(name) { }\r\n\r\n    public override void Attack() {\r\n        Console.WriteLine($"{Name} strikes with a sword!");\r\n    }\r\n}\n'})}),"\n",(0,o.jsx)(i.h3,{id:"esempio-di-polimorfismo",children:"Esempio di polimorfismo"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-cs",children:'public class Game\r\n{\r\n    public static void Main() {\r\n        List<Character> party = new List<Character> {\r\n            new Archer("Elena"),\r\n            new Knight("Baldric"),\r\n        };\r\n\r\n        foreach (var character in party) {\r\n            character.Attack();\r\n        }\r\n    }\r\n}\n'})})]})}function m(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,i,r)=>{r.d(i,{R:()=>t,x:()=>s});var n=r(6540);const o={},a=n.createContext(o);function t(e){const i=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),n.createElement(a.Provider,{value:i},e.children)}}}]);